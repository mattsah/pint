/**
 * LR parser for C++ generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/ParserClassName.h
 */
#ifndef __Syntax_LR_Parser_h
#define __Syntax_LR_Parser_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"

#include <assert.h>
#include <array>
#include <iostream>
#include <map>
#include <memory>
#include <regex>
#include <sstream>
#include <string>
#include <vector>

// ------------------------------------
// Module include prologue.
//
// Should include at least value/result type:
//
// type Value = <...>;
//
// Or struct Value { ... };
//
// Can also include parsing hooks:
//
//   void onParseBegin(const Parser& parser, const std::string& str) {
//     ...
//   }
//
//   void onParseBegin(const Parser& parser, const Value& result) {
//     ...
//   }
//
// clang-format off
#include "tree.h"

  using namespace pint;
  using Value = std::shared_ptr<Node>;

  
  #define debug(msg) std::cout <<  std::string(2 * (parser.valuesStack.size() - 1), ' ') << msg << std::endl;
  // #define debug(msg)  // clang-format on

namespace syntax {

/**
 * Tokenizer class.
 */
// clang-format off
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 */

#ifndef __Syntax_Tokenizer_h
#define __Syntax_Tokenizer_h

class Tokenizer;

// ------------------------------------------------------------------
// TokenType.

enum class TokenType {
  __EMPTY = -1,
  // clang-format off
  SEMICOLON = 32,
  IDENTIFIER = 33,
  SEPARATOR = 34,
  INTEGER = 35,
  REAL = 36,
  BOOLEAN = 37,
  STRING = 38,
  TYPE_BASE = 39,
  TYPE_FORM = 40,
  TYPE_TMPL = 41,
  TOKEN_TYPE_42 = 42,
  TOKEN_TYPE_43 = 43,
  TOKEN_TYPE_44 = 44,
  TOKEN_TYPE_45 = 45,
  TOKEN_TYPE_46 = 46,
  TOKEN_TYPE_47 = 47,
  TOKEN_TYPE_48 = 48,
  TOKEN_TYPE_49 = 49,
  TOKEN_TYPE_50 = 50,
  TOKEN_TYPE_51 = 51,
  TOKEN_TYPE_52 = 52,
  TOKEN_TYPE_53 = 53,
  TOKEN_TYPE_54 = 54,
  TOKEN_TYPE_55 = 55,
  TOKEN_TYPE_56 = 56,
  TOKEN_TYPE_57 = 57,
  TOKEN_TYPE_58 = 58,
  TOKEN_TYPE_59 = 59,
  __EOF = 60
  // clang-format on
};

// ------------------------------------------------------------------
// Token.

struct Token {
  TokenType type;
  std::string value;

  int startOffset;
  int endOffset;
  int startLine;
  int endLine;
  int startColumn;
  int endColumn;
};

using SharedToken = std::shared_ptr<Token>;

typedef TokenType (*LexRuleHandler)(const Tokenizer&, const std::string&);

// ------------------------------------------------------------------
// Lex rule: [regex, handler]

struct LexRule {
  std::regex regex;
  LexRuleHandler handler;
};

// ------------------------------------------------------------------
// Token.

enum TokenizerState {
  // clang-format off
  INITIAL
  // clang-format on
};

// ------------------------------------------------------------------
// Tokenizer.

class Tokenizer {
 public:
  /**
   * Initializes a parsing string.
   */
  void initString(const std::string& str) {
    str_ = str;

    // Initialize states.
    states_.clear();
    states_.push_back(TokenizerState::INITIAL);

    cursor_ = 0;
    currentLine_ = 1;
    currentColumn_ = 0;
    currentLineBeginOffset_ = 0;

    tokenStartOffset_ = 0;
    tokenEndOffset_ = 0;
    tokenStartLine_ = 0;
    tokenEndLine_ = 0;
    tokenStartColumn_ = 0;
    tokenEndColumn_ = 0;
  }

  /**
   * Whether there are still tokens in the stream.
   */
  inline bool hasMoreTokens() { return cursor_ <= str_.length(); }

  /**
   * Returns current tokenizing state.
   */
  TokenizerState getCurrentState() { return states_.back(); }

  /**
   * Enters a new state pushing it on the states stack.
   */
  void pushState(TokenizerState state) { states_.push_back(state); }

  /**
   * Alias for `push_state`.
   */
  void begin(TokenizerState state) { states_.push_back(state); }

  /**
   * Exits a current state popping it from the states stack.
   */
  TokenizerState popState() {
    auto state = states_.back();
    states_.pop_back();
    return state;
  }

  /**
   * Returns next token.
   */
  SharedToken getNextToken() {
    if (!hasMoreTokens()) {
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    auto strSlice = str_.substr(cursor_);

    auto lexRulesForState = lexRulesByStartConditions_.at(getCurrentState());

    for (const auto& ruleIndex : lexRulesForState) {
      auto rule = lexRules_[ruleIndex];
      std::smatch sm;

      if (std::regex_search(strSlice, sm, rule.regex)) {
        yytext = sm[0];

        captureLocations_(yytext);
        cursor_ += yytext.length();

        // Manual handling of EOF token (the end of string). Return it
        // as `EOF` symbol.
        if (yytext.length() == 0) {
          cursor_++;
        }

        auto tokenType = rule.handler(*this, yytext);

        if (tokenType == TokenType::__EMPTY) {
          return getNextToken();
        }

        return toToken(tokenType);
      }
    }

    if (isEOF()) {
      cursor_++;
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    throwUnexpectedToken(std::string(1, strSlice[0]), currentLine_,
                         currentColumn_);
  }

  /**
   * Whether the cursor is at the EOF.
   */
  inline bool isEOF() { return cursor_ == str_.length(); }

  SharedToken toToken(TokenType tokenType) {
    return std::shared_ptr<Token>(new Token{
        .type = tokenType,
        .value = yytext,
        .startOffset = tokenStartOffset_,
        .endOffset = tokenEndOffset_,
        .startLine = tokenStartLine_,
        .endLine = tokenEndLine_,
        .startColumn = tokenStartColumn_,
        .endColumn = tokenEndColumn_,
    });
  }

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  [[noreturn]] void throwUnexpectedToken(const std::string& symbol, int line,
                                         int column) {
    std::stringstream ss{str_};
    std::string lineStr;
    int currentLine = 1;

    while (currentLine++ <= line) {
      std::getline(ss, lineStr, '\n');
    }

    auto pad = std::string(column, ' ');

    std::stringstream errMsg;

    errMsg << "Syntax Error:\n\n"
           << lineStr << "\n"
           << pad << "^\nUnexpected token \"" << symbol << "\" at " << line
           << ":" << column << "\n\n";

    std::cerr << errMsg.str();
    throw new std::runtime_error(errMsg.str().c_str());
  }

  /**
   * Matched text.
   */
  std::string yytext;

 private:
  /**
   * Captures token locations.
   */
  void captureLocations_(const std::string& matched) {
    auto len = matched.length();

    // Absolute offsets.
    tokenStartOffset_ = cursor_;

    // Line-based locations, start.
    tokenStartLine_ = currentLine_;
    tokenStartColumn_ = tokenStartOffset_ - currentLineBeginOffset_;

    // Extract `\n` in the matched token.
    std::stringstream ss{matched};
    std::string lineStr;
    std::getline(ss, lineStr, '\n');
    while (ss.tellg() > 0 && ss.tellg() <= len) {
      currentLine_++;
      currentLineBeginOffset_ = tokenStartOffset_ + ss.tellg();
      std::getline(ss, lineStr, '\n');
    }

    tokenEndOffset_ = cursor_ + len;

    // Line-based locations, end.
    tokenEndLine_ = currentLine_;
    tokenEndColumn_ = tokenEndOffset_ - currentLineBeginOffset_;
    currentColumn_ = tokenEndColumn_;
  }

  /**
   * Lexical rules.
   */
  // clang-format off
  static constexpr size_t LEX_RULES_COUNT = 31;
  static std::array<LexRule, LEX_RULES_COUNT> lexRules_;
  static std::map<TokenizerState, std::vector<size_t>> lexRulesByStartConditions_;
  // clang-format on

  /**
   * Special EOF token.
   */
  static std::string __EOF;

  /**
   * Tokenizing string.
   */
  std::string str_;

  /**
   * Cursor for current symbol.
   */
  int cursor_;

  /**
   * States.
   */
  std::vector<TokenizerState> states_;

  /**
   * Line-based location tracking.
   */
  int currentLine_;
  int currentColumn_;
  int currentLineBeginOffset_;

  /**
   * Location data of a matched token.
   */
  int tokenStartOffset_;
  int tokenEndOffset_;
  int tokenStartLine_;
  int tokenEndLine_;
  int tokenStartColumn_;
  int tokenEndColumn_;
};

// ------------------------------------------------------------------
// Lexical rule handlers.

std::string Tokenizer::__EOF("$");

// clang-format off
inline TokenType _lexRule1(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_42;
}

inline TokenType _lexRule2(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_43;
}

inline TokenType _lexRule3(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_44;
}

inline TokenType _lexRule4(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_45;
}

inline TokenType _lexRule5(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_46;
}

inline TokenType _lexRule6(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_47;
}

inline TokenType _lexRule7(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_48;
}

inline TokenType _lexRule8(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_49;
}

inline TokenType _lexRule9(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_50;
}

inline TokenType _lexRule10(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_51;
}

inline TokenType _lexRule11(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_52;
}

inline TokenType _lexRule12(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_53;
}

inline TokenType _lexRule13(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_54;
}

inline TokenType _lexRule14(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_55;
}

inline TokenType _lexRule15(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_56;
}

inline TokenType _lexRule16(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_57;
}

inline TokenType _lexRule17(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_58;
}

inline TokenType _lexRule18(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_59;
}

inline TokenType _lexRule19(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule20(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule21(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule22(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TYPE_BASE;
}

inline TokenType _lexRule23(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TYPE_FORM;
}

inline TokenType _lexRule24(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TYPE_TMPL;
}

inline TokenType _lexRule25(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::STRING;
}

inline TokenType _lexRule26(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::BOOLEAN;
}

inline TokenType _lexRule27(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::REAL;
}

inline TokenType _lexRule28(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::INTEGER;
}

inline TokenType _lexRule29(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::IDENTIFIER;
}

inline TokenType _lexRule30(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SEMICOLON;
}

inline TokenType _lexRule31(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SEPARATOR;
}
// clang-format on

// ------------------------------------------------------------------
// Lexical rules.

// clang-format off
std::array<LexRule, Tokenizer::LEX_RULES_COUNT> Tokenizer::lexRules_ = {{
  {std::regex(R"(^test)"), &_lexRule1},
  {std::regex(R"(^\.)"), &_lexRule2},
  {std::regex(R"(^as)"), &_lexRule3},
  {std::regex(R"(^\()"), &_lexRule4},
  {std::regex(R"(^\))"), &_lexRule5},
  {std::regex(R"(^,)"), &_lexRule6},
  {std::regex(R"(^unit)"), &_lexRule7},
  {std::regex(R"(^uses)"), &_lexRule8},
  {std::regex(R"(^register)"), &_lexRule9},
  {std::regex(R"(^:)"), &_lexRule10},
  {std::regex(R"(^=)"), &_lexRule11},
  {std::regex(R"(^begin)"), &_lexRule12},
  {std::regex(R"(^end)"), &_lexRule13},
  {std::regex(R"(^\[)"), &_lexRule14},
  {std::regex(R"(^\])"), &_lexRule15},
  {std::regex(R"(^function)"), &_lexRule16},
  {std::regex(R"(^constructor)"), &_lexRule17},
  {std::regex(R"(^void)"), &_lexRule18},
  {std::regex(R"(^\s+)"), &_lexRule19},
  {std::regex(R"(^\{[^\}]*\})"), &_lexRule20},
  {std::regex(R"(^\/\/.*\n)"), &_lexRule21},
  {std::regex(R"(^(integer|cardinal|real|char|string|boolean))"), &_lexRule22},
  {std::regex(R"(^(interface|implementation|class))"), &_lexRule23},
  {std::regex(R"(^(type|label|record))"), &_lexRule24},
  {std::regex(R"(^(['"])(.*?[^\\])?(\\\\)*(\1))"), &_lexRule25},
  {std::regex(R"(^true|false)"), &_lexRule26},
  {std::regex(R"(^[0-9]+\.[0-9]+)"), &_lexRule27},
  {std::regex(R"(^[0-9]+)"), &_lexRule28},
  {std::regex(R"(^[a-zA-Z_][a-zA-Z0-9_]*)"), &_lexRule29},
  {std::regex(R"(^[;])"), &_lexRule30},
  {std::regex(R"(^\\)"), &_lexRule31}
}};
std::map<TokenizerState, std::vector<size_t>> Tokenizer::lexRulesByStartConditions_ =  {{TokenizerState::INITIAL, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}}};
// clang-format on

#endif
// clang-format on

#define POP_V()              \
  parser.valuesStack.back(); \
  parser.valuesStack.pop_back()

#define POP_T()              \
  parser.tokensStack.back(); \
  parser.tokensStack.pop_back()

#define PUSH_VR() parser.valuesStack.push_back(__)
#define PUSH_TR() parser.tokensStack.push_back(__)

/**
 * Parsing table type.
 */
enum class TE {
  Accept,
  Shift,
  Reduce,
  Transit,
};

/**
 * Parsing table entry.
 */
struct TableEntry {
  TE type;
  int value;
};

// clang-format off
class parser;
// clang-format on

using yyparse = parser;

typedef void (*ProductionHandler)(yyparse&);

/**
 * Encoded production.
 *
 * opcode - encoded index
 * rhsLength - length of the RHS to pop.
 */
struct Production {
  int opcode;
  int rhsLength;
  ProductionHandler handler;
};

// Key: Encoded symbol (terminal or non-terminal) index
// Value: TableEntry
using Row = std::map<int, TableEntry>;

/**
 * Parser class.
 */
// clang-format off
class parser {
  // clang-format on
 public:
  /**
   * Parsing values stack.
   */
  std::vector<Value> valuesStack;

  /**
   * Token values stack.
   */
  std::vector<std::string> tokensStack;

  /**
   * Parsing states stack.
   */
  std::vector<int> statesStack;

  /**
   * Tokenizer.
   */
  Tokenizer tokenizer;

  /**
   * Previous state to calculate the next one.
   */
  int previousState;

  /**
   * Parses a string.
   */
  Value parse(const std::string& str) {
    // clang-format off
    
    // clang-format on

    // Initialize the tokenizer and the string.
    tokenizer.initString(str);

    // Initialize the stacks.
    valuesStack.clear();
    tokensStack.clear();
    statesStack.clear();

    // Initial 0 state.
    statesStack.push_back(0);

    auto token = tokenizer.getNextToken();
    auto shiftedToken = token;

    // Main parsing loop.
    for (;;) {
      auto state = statesStack.back();
      auto column = (int)token->type;

      if (table_[state].count(column) == 0) {
        throwUnexpectedToken(token);
      }

      auto entry = table_[state].at(column);

      // Shift a token, go to state.
      if (entry.type == TE::Shift) {
        // Push token.
        tokensStack.push_back(token->value);

        // Push next state number: "s5" -> 5
        statesStack.push_back(entry.value);

        shiftedToken = token;
        token = tokenizer.getNextToken();
      }

      // Reduce by production.
      else if (entry.type == TE::Reduce) {
        auto productionNumber = entry.value;
        auto production = productions_[productionNumber];

        tokenizer.yytext = shiftedToken->value;

        auto rhsLength = production.rhsLength;
        while (rhsLength > 0) {
          statesStack.pop_back();
          rhsLength--;
        }

        // Call the handler.
        production.handler(*this);

        auto previousState = statesStack.back();

        auto symbolToReduceWith = production.opcode;
        auto nextStateEntry = table_[previousState].at(symbolToReduceWith);
        assert(nextStateEntry.type == TE::Transit);

        statesStack.push_back(nextStateEntry.value);
      }

      // Accept the string.
      else if (entry.type == TE::Accept) {
        // Pop state number.
        statesStack.pop_back();

        // Pop the parsed value.
        // clang-format off
        auto result = valuesStack.back(); valuesStack.pop_back();
        // clang-format on

        if (statesStack.size() != 1 || statesStack.back() != 0 ||
            tokenizer.hasMoreTokens()) {
          throwUnexpectedToken(token);
        }

        statesStack.pop_back();

        // clang-format off
        
        // clang-format on

        return result;
      }
    }
  }

 private:
  /**
   * Throws parser error on unexpected token.
   */
  [[noreturn]] void throwUnexpectedToken(SharedToken token) {
    if (token->type == TokenType::__EOF && !tokenizer.hasMoreTokens()) {
      std::string errMsg = "Unexpected end of input.\n";
      std::cerr << errMsg;
      throw std::runtime_error(errMsg.c_str());
    }
    tokenizer.throwUnexpectedToken(token->value, token->startLine,
                                   token->startColumn);
  }

  // clang-format off
  static constexpr size_t PRODUCTIONS_COUNT = 65;
  static std::array<Production, PRODUCTIONS_COUNT> productions_;

  static constexpr size_t ROWS_COUNT = 97;
  static std::array<Row, ROWS_COUNT> table_;
  // clang-format on
};

// ------------------------------------------------------------------
// Productions.

// clang-format off
void _handler1(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler2(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<ListNode>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler3(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_2);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler4(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

debug("code_line: unit" << std::endl);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler5(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

debug("code_line: uses" << std::endl);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler6(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

debug("code_line: register" << std::endl);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler7(yyparse& parser) {
// Semantic action prologue.


debug("body: empty");
    auto __ = std::make_shared<ListNode>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler8(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
auto _1 = POP_V();

debug("body: body body_line");
    as(ListNode, _1)->list.push_back(_2);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler9(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();

debug("body_line: test;");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler10(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

debug("identifier: IDENTIFIER(" + _1 + ")");
    auto __ = std::make_shared<IdentifierNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler11(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

debug("path_as: unit_path");
    auto __ = std::make_shared<PathAsNode>(as(ListNode, _1));

 // Semantic action epilogue.
PUSH_VR();

}

void _handler12(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

debug("path_as: unit_path.identifier");
    auto __ = std::make_shared<PathAsNode>(as(ListNode, _1), as(IdentifierNode, _3));

 // Semantic action epilogue.
PUSH_VR();

}

void _handler13(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

debug("path_as: path_as as identifier");
    as(PathAsNode, _1)->setAlias(as(IdentifierNode, _3));
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler14(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

debug("path_as: unit_path( identifier_as_list )");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler15(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler16(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler17(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler18(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler19(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

debug("unit: unit unit_path SEMICOLON");
    auto __ = std::make_shared<UnitNode>(as(ListNode, _2));

 // Semantic action epilogue.
PUSH_VR();

}

void _handler20(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

debug("unit_path: identifier");
    auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler21(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler22(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler23(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler24(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = std::make_shared<UsesNode>(as(ListNode, _2));

 // Semantic action epilogue.
PUSH_VR();

}

void _handler25(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler26(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler27(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler28(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

// register: function =
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler29(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

debug("register: register identifier: type_func_decl begin body end");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler30(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler31(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler32(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

// size: INTEGER
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler33(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler34(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

// length: INTEGER
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler35(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

// return: void
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler36(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

// return: type
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler37(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

debug("type: type_base");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler38(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

debug("type: identifier");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler39(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
auto _1 = POP_V();

debug("type: type[length]");
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler40(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler41(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler42(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler43(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

debug("literal: " + _1);
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler44(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler45(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler46(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler47(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler48(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler49(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler50(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

debug("type_func_decl: type_func(arg_list): return");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler51(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler52(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

debug("identifier_list: identifier");
    auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler53(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

debug("identifier_list: identiifer_list, identifier");
    as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler54(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

debug("arg: identifier_list");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler55(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
auto _1 = POP_V();

debug("arg: identifier_list: type");
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler56(yyparse& parser) {
// Semantic action prologue.


debug("arg_list: empty");
    auto __ = std::make_shared<ListNode>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler57(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
auto _1 = POP_V();

debug("arg_list: arg_list arg");
    as(ListNode, _1)->list.push_back(_2);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler58(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

debug("arg_list: arg_list SEMICOLON arg");
    as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler59(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

debug("type_base: " + _1);
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler60(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
auto _1 = POP_V();

debug("type_base: type_base(size)");
    auto __ = _1
  ;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler61(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

debug("type_form: " + _1);
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler62(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

debug("type_tmpl: " + _1);
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler63(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

debug("type_func: function");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler64(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

debug("type_cons: constructor");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler65(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

debug("void: void");
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}
// clang-format on

// clang-format off
std::array<Production, yyparse::PRODUCTIONS_COUNT> yyparse::productions_ = {{{-1, 1, &_handler1},
{0, 0, &_handler2},
{0, 2, &_handler3},
{1, 1, &_handler4},
{1, 1, &_handler5},
{1, 1, &_handler6},
{2, 0, &_handler7},
{2, 2, &_handler8},
{3, 2, &_handler9},
{4, 1, &_handler10},
{5, 1, &_handler11},
{5, 3, &_handler12},
{5, 3, &_handler13},
{5, 4, &_handler14},
{6, 1, &_handler15},
{6, 3, &_handler16},
{7, 1, &_handler17},
{7, 3, &_handler18},
{8, 3, &_handler19},
{9, 1, &_handler20},
{9, 3, &_handler21},
{10, 1, &_handler22},
{10, 3, &_handler23},
{11, 3, &_handler24},
{12, 1, &_handler25},
{12, 3, &_handler26},
{13, 6, &_handler27},
{13, 6, &_handler28},
{13, 7, &_handler29},
{13, 7, &_handler30},
{14, 0, &_handler31},
{14, 1, &_handler32},
{15, 0, &_handler33},
{15, 1, &_handler34},
{16, 1, &_handler35},
{16, 1, &_handler36},
{17, 1, &_handler37},
{17, 1, &_handler38},
{17, 4, &_handler39},
{18, 1, &_handler40},
{18, 1, &_handler41},
{18, 1, &_handler42},
{18, 1, &_handler43},
{19, 1, &_handler44},
{19, 3, &_handler45},
{19, 4, &_handler46},
{20, 1, &_handler47},
{20, 3, &_handler48},
{20, 4, &_handler49},
{21, 6, &_handler50},
{22, 6, &_handler51},
{23, 1, &_handler52},
{23, 3, &_handler53},
{24, 1, &_handler54},
{24, 3, &_handler55},
{25, 0, &_handler56},
{25, 2, &_handler57},
{25, 3, &_handler58},
{26, 1, &_handler59},
{26, 4, &_handler60},
{27, 1, &_handler61},
{28, 1, &_handler62},
{29, 1, &_handler63},
{30, 1, &_handler64},
{31, 1, &_handler65}}};
// clang-format on

// ------------------------------------------------------------------
// Parsing table.

// clang-format off
std::array<Row, yyparse::ROWS_COUNT> yyparse::table_ = {
    Row {{0, {TE::Transit, 1}}, {48, {TE::Reduce, 1}}, {49, {TE::Reduce, 1}}, {50, {TE::Reduce, 1}}, {60, {TE::Reduce, 1}}},
    Row {{1, {TE::Transit, 2}}, {8, {TE::Transit, 3}}, {11, {TE::Transit, 4}}, {13, {TE::Transit, 5}}, {48, {TE::Shift, 6}}, {49, {TE::Shift, 7}}, {50, {TE::Shift, 8}}, {60, {TE::Accept, 0}}},
    Row {{48, {TE::Reduce, 2}}, {49, {TE::Reduce, 2}}, {50, {TE::Reduce, 2}}, {60, {TE::Reduce, 2}}},
    Row {{48, {TE::Reduce, 3}}, {49, {TE::Reduce, 3}}, {50, {TE::Reduce, 3}}, {60, {TE::Reduce, 3}}},
    Row {{48, {TE::Reduce, 4}}, {49, {TE::Reduce, 4}}, {50, {TE::Reduce, 4}}, {60, {TE::Reduce, 4}}},
    Row {{48, {TE::Reduce, 5}}, {49, {TE::Reduce, 5}}, {50, {TE::Reduce, 5}}, {60, {TE::Reduce, 5}}},
    Row {{4, {TE::Transit, 10}}, {9, {TE::Transit, 9}}, {33, {TE::Shift, 11}}},
    Row {{4, {TE::Transit, 10}}, {5, {TE::Transit, 16}}, {9, {TE::Transit, 17}}, {12, {TE::Transit, 15}}, {33, {TE::Shift, 11}}},
    Row {{4, {TE::Transit, 34}}, {33, {TE::Shift, 11}}},
    Row {{32, {TE::Shift, 12}}, {34, {TE::Shift, 13}}},
    Row {{32, {TE::Reduce, 19}}, {34, {TE::Reduce, 19}}, {43, {TE::Reduce, 19}}, {44, {TE::Reduce, 19}}, {45, {TE::Reduce, 19}}, {46, {TE::Reduce, 19}}, {47, {TE::Reduce, 19}}},
    Row {{32, {TE::Reduce, 9}}, {33, {TE::Reduce, 9}}, {34, {TE::Reduce, 9}}, {43, {TE::Reduce, 9}}, {44, {TE::Reduce, 9}}, {45, {TE::Reduce, 9}}, {46, {TE::Reduce, 9}}, {47, {TE::Reduce, 9}}, {51, {TE::Reduce, 9}}, {52, {TE::Reduce, 9}}, {53, {TE::Reduce, 9}}, {55, {TE::Reduce, 9}}},
    Row {{48, {TE::Reduce, 18}}, {49, {TE::Reduce, 18}}, {50, {TE::Reduce, 18}}, {60, {TE::Reduce, 18}}},
    Row {{4, {TE::Transit, 14}}, {33, {TE::Shift, 11}}},
    Row {{32, {TE::Reduce, 20}}, {34, {TE::Reduce, 20}}, {43, {TE::Reduce, 20}}, {44, {TE::Reduce, 20}}, {45, {TE::Reduce, 20}}, {46, {TE::Reduce, 20}}, {47, {TE::Reduce, 20}}},
    Row {{32, {TE::Shift, 18}}, {47, {TE::Shift, 19}}},
    Row {{32, {TE::Reduce, 24}}, {44, {TE::Shift, 21}}, {47, {TE::Reduce, 24}}},
    Row {{32, {TE::Reduce, 10}}, {34, {TE::Shift, 13}}, {43, {TE::Shift, 23}}, {44, {TE::Reduce, 10}}, {45, {TE::Shift, 24}}, {47, {TE::Reduce, 10}}},
    Row {{48, {TE::Reduce, 23}}, {49, {TE::Reduce, 23}}, {50, {TE::Reduce, 23}}, {60, {TE::Reduce, 23}}},
    Row {{4, {TE::Transit, 10}}, {5, {TE::Transit, 20}}, {9, {TE::Transit, 17}}, {33, {TE::Shift, 11}}},
    Row {{32, {TE::Reduce, 25}}, {44, {TE::Shift, 21}}, {47, {TE::Reduce, 25}}},
    Row {{4, {TE::Transit, 22}}, {33, {TE::Shift, 11}}},
    Row {{32, {TE::Reduce, 12}}, {44, {TE::Reduce, 12}}, {47, {TE::Reduce, 12}}},
    Row {{4, {TE::Transit, 25}}, {33, {TE::Shift, 11}}},
    Row {{4, {TE::Transit, 28}}, {6, {TE::Transit, 27}}, {7, {TE::Transit, 26}}, {33, {TE::Shift, 11}}},
    Row {{32, {TE::Reduce, 11}}, {44, {TE::Reduce, 11}}, {47, {TE::Reduce, 11}}},
    Row {{46, {TE::Shift, 29}}, {47, {TE::Shift, 30}}},
    Row {{46, {TE::Reduce, 16}}, {47, {TE::Reduce, 16}}},
    Row {{44, {TE::Shift, 32}}, {46, {TE::Reduce, 14}}, {47, {TE::Reduce, 14}}},
    Row {{32, {TE::Reduce, 13}}, {44, {TE::Reduce, 13}}, {47, {TE::Reduce, 13}}},
    Row {{4, {TE::Transit, 28}}, {6, {TE::Transit, 31}}, {33, {TE::Shift, 11}}},
    Row {{46, {TE::Reduce, 17}}, {47, {TE::Reduce, 17}}},
    Row {{4, {TE::Transit, 33}}, {33, {TE::Shift, 11}}},
    Row {{46, {TE::Reduce, 15}}, {47, {TE::Reduce, 15}}},
    Row {{51, {TE::Shift, 35}}},
    Row {{19, {TE::Transit, 36}}, {20, {TE::Transit, 38}}, {21, {TE::Transit, 37}}, {27, {TE::Transit, 39}}, {28, {TE::Transit, 43}}, {29, {TE::Transit, 41}}, {40, {TE::Shift, 40}}, {41, {TE::Shift, 44}}, {57, {TE::Shift, 42}}},
    Row {{52, {TE::Shift, 45}}},
    Row {{52, {TE::Shift, 49}}, {53, {TE::Shift, 50}}},
    Row {{53, {TE::Shift, 55}}},
    Row {{45, {TE::Shift, 58}}, {52, {TE::Reduce, 43}}},
    Row {{45, {TE::Reduce, 60}}, {52, {TE::Reduce, 60}}},
    Row {{45, {TE::Shift, 65}}},
    Row {{45, {TE::Reduce, 62}}},
    Row {{45, {TE::Shift, 93}}, {53, {TE::Reduce, 46}}},
    Row {{45, {TE::Reduce, 61}}, {53, {TE::Reduce, 61}}},
    Row {{3, {TE::Transit, 46}}, {42, {TE::Shift, 47}}},
    Row {{48, {TE::Reduce, 26}}, {49, {TE::Reduce, 26}}, {50, {TE::Reduce, 26}}, {60, {TE::Reduce, 26}}},
    Row {{32, {TE::Shift, 48}}},
    Row {{42, {TE::Reduce, 8}}, {48, {TE::Reduce, 8}}, {49, {TE::Reduce, 8}}, {50, {TE::Reduce, 8}}, {54, {TE::Reduce, 8}}, {60, {TE::Reduce, 8}}},
    Row {{3, {TE::Transit, 51}}, {42, {TE::Shift, 47}}},
    Row {{2, {TE::Transit, 52}}, {42, {TE::Reduce, 6}}, {54, {TE::Reduce, 6}}},
    Row {{48, {TE::Reduce, 27}}, {49, {TE::Reduce, 27}}, {50, {TE::Reduce, 27}}, {60, {TE::Reduce, 27}}},
    Row {{3, {TE::Transit, 54}}, {42, {TE::Shift, 47}}, {54, {TE::Shift, 53}}},
    Row {{48, {TE::Reduce, 28}}, {49, {TE::Reduce, 28}}, {50, {TE::Reduce, 28}}, {60, {TE::Reduce, 28}}},
    Row {{42, {TE::Reduce, 7}}, {54, {TE::Reduce, 7}}},
    Row {{2, {TE::Transit, 56}}, {42, {TE::Reduce, 6}}, {54, {TE::Reduce, 6}}},
    Row {{3, {TE::Transit, 54}}, {42, {TE::Shift, 47}}, {54, {TE::Shift, 57}}},
    Row {{48, {TE::Reduce, 29}}, {49, {TE::Reduce, 29}}, {50, {TE::Reduce, 29}}, {60, {TE::Reduce, 29}}},
    Row {{4, {TE::Transit, 10}}, {9, {TE::Transit, 61}}, {10, {TE::Transit, 60}}, {33, {TE::Shift, 11}}, {46, {TE::Shift, 59}}},
    Row {{52, {TE::Reduce, 44}}},
    Row {{46, {TE::Shift, 62}}},
    Row {{34, {TE::Shift, 13}}, {46, {TE::Reduce, 21}}, {47, {TE::Shift, 63}}},
    Row {{52, {TE::Reduce, 45}}},
    Row {{4, {TE::Transit, 10}}, {9, {TE::Transit, 64}}, {33, {TE::Shift, 11}}},
    Row {{34, {TE::Shift, 13}}, {46, {TE::Reduce, 22}}},
    Row {{25, {TE::Transit, 66}}, {32, {TE::Reduce, 55}}, {33, {TE::Reduce, 55}}, {46, {TE::Reduce, 55}}},
    Row {{4, {TE::Transit, 71}}, {23, {TE::Transit, 70}}, {24, {TE::Transit, 68}}, {32, {TE::Shift, 69}}, {33, {TE::Shift, 11}}, {46, {TE::Shift, 67}}},
    Row {{51, {TE::Shift, 72}}},
    Row {{32, {TE::Reduce, 56}}, {33, {TE::Reduce, 56}}, {46, {TE::Reduce, 56}}, {51, {TE::Shift, 88}}},
    Row {{4, {TE::Transit, 71}}, {23, {TE::Transit, 70}}, {24, {TE::Transit, 90}}, {33, {TE::Shift, 11}}},
    Row {{32, {TE::Reduce, 53}}, {33, {TE::Reduce, 53}}, {46, {TE::Reduce, 53}}, {47, {TE::Shift, 91}}, {51, {TE::Reduce, 53}}},
    Row {{32, {TE::Reduce, 51}}, {33, {TE::Reduce, 51}}, {46, {TE::Reduce, 51}}, {47, {TE::Reduce, 51}}, {51, {TE::Reduce, 51}}},
    Row {{4, {TE::Transit, 78}}, {16, {TE::Transit, 73}}, {17, {TE::Transit, 75}}, {26, {TE::Transit, 77}}, {31, {TE::Transit, 74}}, {33, {TE::Shift, 11}}, {39, {TE::Shift, 79}}, {59, {TE::Shift, 76}}},
    Row {{52, {TE::Reduce, 49}}, {53, {TE::Reduce, 49}}},
    Row {{52, {TE::Reduce, 34}}, {53, {TE::Reduce, 34}}},
    Row {{52, {TE::Reduce, 35}}, {53, {TE::Reduce, 35}}, {55, {TE::Shift, 80}}},
    Row {{52, {TE::Reduce, 64}}, {53, {TE::Reduce, 64}}},
    Row {{32, {TE::Reduce, 36}}, {33, {TE::Reduce, 36}}, {45, {TE::Shift, 84}}, {46, {TE::Reduce, 36}}, {51, {TE::Reduce, 36}}, {52, {TE::Reduce, 36}}, {53, {TE::Reduce, 36}}, {55, {TE::Reduce, 36}}},
    Row {{32, {TE::Reduce, 37}}, {33, {TE::Reduce, 37}}, {46, {TE::Reduce, 37}}, {51, {TE::Reduce, 37}}, {52, {TE::Reduce, 37}}, {53, {TE::Reduce, 37}}, {55, {TE::Reduce, 37}}},
    Row {{32, {TE::Reduce, 58}}, {33, {TE::Reduce, 58}}, {45, {TE::Reduce, 58}}, {46, {TE::Reduce, 58}}, {51, {TE::Reduce, 58}}, {52, {TE::Reduce, 58}}, {53, {TE::Reduce, 58}}, {55, {TE::Reduce, 58}}},
    Row {{15, {TE::Transit, 81}}, {35, {TE::Shift, 82}}, {56, {TE::Reduce, 32}}},
    Row {{56, {TE::Shift, 83}}},
    Row {{56, {TE::Reduce, 33}}},
    Row {{32, {TE::Reduce, 38}}, {33, {TE::Reduce, 38}}, {46, {TE::Reduce, 38}}, {51, {TE::Reduce, 38}}, {52, {TE::Reduce, 38}}, {53, {TE::Reduce, 38}}, {55, {TE::Reduce, 38}}},
    Row {{14, {TE::Transit, 85}}, {35, {TE::Shift, 86}}, {46, {TE::Reduce, 30}}},
    Row {{46, {TE::Shift, 87}}},
    Row {{46, {TE::Reduce, 31}}},
    Row {{32, {TE::Reduce, 59}}, {33, {TE::Reduce, 59}}, {45, {TE::Reduce, 59}}, {46, {TE::Reduce, 59}}, {51, {TE::Reduce, 59}}, {52, {TE::Reduce, 59}}, {53, {TE::Reduce, 59}}, {55, {TE::Reduce, 59}}},
    Row {{4, {TE::Transit, 78}}, {17, {TE::Transit, 89}}, {26, {TE::Transit, 77}}, {33, {TE::Shift, 11}}, {39, {TE::Shift, 79}}},
    Row {{32, {TE::Reduce, 54}}, {33, {TE::Reduce, 54}}, {46, {TE::Reduce, 54}}, {51, {TE::Reduce, 54}}, {55, {TE::Shift, 80}}},
    Row {{32, {TE::Reduce, 57}}, {33, {TE::Reduce, 57}}, {46, {TE::Reduce, 57}}, {51, {TE::Shift, 88}}},
    Row {{4, {TE::Transit, 92}}, {33, {TE::Shift, 11}}},
    Row {{32, {TE::Reduce, 52}}, {33, {TE::Reduce, 52}}, {46, {TE::Reduce, 52}}, {47, {TE::Reduce, 52}}, {51, {TE::Reduce, 52}}},
    Row {{4, {TE::Transit, 10}}, {9, {TE::Transit, 61}}, {10, {TE::Transit, 95}}, {33, {TE::Shift, 11}}, {46, {TE::Shift, 94}}},
    Row {{53, {TE::Reduce, 47}}},
    Row {{46, {TE::Shift, 96}}},
    Row {{53, {TE::Reduce, 48}}}
};
// clang-format on

}  // namespace syntax

#endif