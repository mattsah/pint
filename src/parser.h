/**
 * LR parser for C++ generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/ParserClassName.h
 */
#ifndef __Syntax_LR_Parser_h
#define __Syntax_LR_Parser_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"

#include <assert.h>
#include <array>
#include <iostream>
#include <map>
#include <memory>
#include <regex>
#include <sstream>
#include <string>
#include <vector>

// ------------------------------------
// Module include prologue.
//
// Should include at least value/result type:
//
// type Value = <...>;
//
// Or struct Value { ... };
//
// Can also include parsing hooks:
//
//   void onParseBegin(const Parser& parser, const std::string& str) {
//     ...
//   }
//
//   void onParseBegin(const Parser& parser, const Value& result) {
//     ...
//   }
//
// clang-format off
#include "tree.h"

  using namespace pint;
  using Value = std::shared_ptr<Node>;


  // #define debug(msg) std::cout << std::string(2 * (parser.valuesStack.size()), ' ') << msg << std::endl;
  // #define debug(msg)  // clang-format on

namespace syntax {

/**
 * Tokenizer class.
 */
// clang-format off
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 */

#ifndef __Syntax_Tokenizer_h
#define __Syntax_Tokenizer_h

class Tokenizer;

// ------------------------------------------------------------------
// TokenType.

enum class TokenType {
  __EMPTY = -1,
  // clang-format off
  SEMICOLON = 54,
  REAL = 55,
  INTEGER = 56,
  BOOLEAN = 57,
  STRING = 58,
  IDENTIFIER = 59,
  SEPARATOR = 60,
  TYPE_BASE = 61,
  ADD = 62,
  SUB = 63,
  MUL = 64,
  DIV = 65,
  TOKEN_TYPE_66 = 66,
  TOKEN_TYPE_67 = 67,
  TOKEN_TYPE_68 = 68,
  TOKEN_TYPE_69 = 69,
  TOKEN_TYPE_70 = 70,
  TOKEN_TYPE_71 = 71,
  TOKEN_TYPE_72 = 72,
  TOKEN_TYPE_73 = 73,
  TOKEN_TYPE_74 = 74,
  TOKEN_TYPE_75 = 75,
  TOKEN_TYPE_76 = 76,
  TOKEN_TYPE_77 = 77,
  TOKEN_TYPE_78 = 78,
  TOKEN_TYPE_79 = 79,
  TOKEN_TYPE_80 = 80,
  TOKEN_TYPE_81 = 81,
  TOKEN_TYPE_82 = 82,
  TOKEN_TYPE_83 = 83,
  TOKEN_TYPE_84 = 84,
  TOKEN_TYPE_85 = 85,
  TOKEN_TYPE_86 = 86,
  TOKEN_TYPE_87 = 87,
  TOKEN_TYPE_88 = 88,
  TOKEN_TYPE_89 = 89,
  TOKEN_TYPE_90 = 90,
  TOKEN_TYPE_91 = 91,
  TOKEN_TYPE_92 = 92,
  TOKEN_TYPE_93 = 93,
  __EOF = 94
  // clang-format on
};

// ------------------------------------------------------------------
// Token.

struct Token {
  TokenType type;
  std::string value;

  int startOffset;
  int endOffset;
  int startLine;
  int endLine;
  int startColumn;
  int endColumn;
};

using SharedToken = std::shared_ptr<Token>;

typedef TokenType (*LexRuleHandler)(const Tokenizer&, const std::string&);

// ------------------------------------------------------------------
// Lex rule: [regex, handler]

struct LexRule {
  std::regex regex;
  LexRuleHandler handler;
};

// ------------------------------------------------------------------
// Token.

enum TokenizerState {
  // clang-format off
  INITIAL
  // clang-format on
};

// ------------------------------------------------------------------
// Tokenizer.

class Tokenizer {
 public:
  /**
   * Initializes a parsing string.
   */
  void initString(const std::string& str) {
    str_ = str;

    // Initialize states.
    states_.clear();
    states_.push_back(TokenizerState::INITIAL);

    cursor_ = 0;
    currentLine_ = 1;
    currentColumn_ = 0;
    currentLineBeginOffset_ = 0;

    tokenStartOffset_ = 0;
    tokenEndOffset_ = 0;
    tokenStartLine_ = 0;
    tokenEndLine_ = 0;
    tokenStartColumn_ = 0;
    tokenEndColumn_ = 0;
  }

  /**
   * Whether there are still tokens in the stream.
   */
  inline bool hasMoreTokens() { return cursor_ <= str_.length(); }

  /**
   * Returns current tokenizing state.
   */
  TokenizerState getCurrentState() { return states_.back(); }

  /**
   * Enters a new state pushing it on the states stack.
   */
  void pushState(TokenizerState state) { states_.push_back(state); }

  /**
   * Alias for `push_state`.
   */
  void begin(TokenizerState state) { states_.push_back(state); }

  /**
   * Exits a current state popping it from the states stack.
   */
  TokenizerState popState() {
    auto state = states_.back();
    states_.pop_back();
    return state;
  }

  /**
   * Returns next token.
   */
  SharedToken getNextToken() {
    if (!hasMoreTokens()) {
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    auto strSlice = str_.substr(cursor_);

    auto lexRulesForState = lexRulesByStartConditions_.at(getCurrentState());

    for (const auto& ruleIndex : lexRulesForState) {
      auto rule = lexRules_[ruleIndex];
      std::smatch sm;

      if (std::regex_search(strSlice, sm, rule.regex)) {
        yytext = sm[0];

        captureLocations_(yytext);
        cursor_ += yytext.length();

        // Manual handling of EOF token (the end of string). Return it
        // as `EOF` symbol.
        if (yytext.length() == 0) {
          cursor_++;
        }

        auto tokenType = rule.handler(*this, yytext);

        if (tokenType == TokenType::__EMPTY) {
          return getNextToken();
        }

        return toToken(tokenType);
      }
    }

    if (isEOF()) {
      cursor_++;
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    throwUnexpectedToken(std::string(1, strSlice[0]), currentLine_,
                         currentColumn_);
  }

  /**
   * Whether the cursor is at the EOF.
   */
  inline bool isEOF() { return cursor_ == str_.length(); }

  SharedToken toToken(TokenType tokenType) {
    return std::shared_ptr<Token>(new Token{
        .type = tokenType,
        .value = yytext,
        .startOffset = tokenStartOffset_,
        .endOffset = tokenEndOffset_,
        .startLine = tokenStartLine_,
        .endLine = tokenEndLine_,
        .startColumn = tokenStartColumn_,
        .endColumn = tokenEndColumn_,
    });
  }

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  [[noreturn]] void throwUnexpectedToken(const std::string& symbol, int line,
                                         int column) {
    std::stringstream ss{str_};
    std::string lineStr;
    int currentLine = 1;

    while (currentLine++ <= line) {
      std::getline(ss, lineStr, '\n');
    }

    auto pad = std::string(column, ' ');

    std::stringstream errMsg;

    errMsg << "Syntax Error:\n\n"
           << lineStr << "\n"
           << pad << "^\nUnexpected token \"" << symbol << "\" at " << line
           << ":" << column << "\n\n";

    std::cerr << errMsg.str();
    throw new std::runtime_error(errMsg.str().c_str());
  }

  /**
   * Matched text.
   */
  std::string yytext;

 private:
  /**
   * Captures token locations.
   */
  void captureLocations_(const std::string& matched) {
    auto len = matched.length();

    // Absolute offsets.
    tokenStartOffset_ = cursor_;

    // Line-based locations, start.
    tokenStartLine_ = currentLine_;
    tokenStartColumn_ = tokenStartOffset_ - currentLineBeginOffset_;

    // Extract `\n` in the matched token.
    std::stringstream ss{matched};
    std::string lineStr;
    std::getline(ss, lineStr, '\n');
    while (ss.tellg() > 0 && ss.tellg() <= len) {
      currentLine_++;
      currentLineBeginOffset_ = tokenStartOffset_ + ss.tellg();
      std::getline(ss, lineStr, '\n');
    }

    tokenEndOffset_ = cursor_ + len;

    // Line-based locations, end.
    tokenEndLine_ = currentLine_;
    tokenEndColumn_ = tokenEndOffset_ - currentLineBeginOffset_;
    currentColumn_ = tokenEndColumn_;
  }

  /**
   * Lexical rules.
   */
  // clang-format off
  static constexpr size_t LEX_RULES_COUNT = 43;
  static std::array<LexRule, LEX_RULES_COUNT> lexRules_;
  static std::map<TokenizerState, std::vector<size_t>> lexRulesByStartConditions_;
  // clang-format on

  /**
   * Special EOF token.
   */
  static std::string __EOF;

  /**
   * Tokenizing string.
   */
  std::string str_;

  /**
   * Cursor for current symbol.
   */
  int cursor_;

  /**
   * States.
   */
  std::vector<TokenizerState> states_;

  /**
   * Line-based location tracking.
   */
  int currentLine_;
  int currentColumn_;
  int currentLineBeginOffset_;

  /**
   * Location data of a matched token.
   */
  int tokenStartOffset_;
  int tokenEndOffset_;
  int tokenStartLine_;
  int tokenEndLine_;
  int tokenStartColumn_;
  int tokenEndColumn_;
};

// ------------------------------------------------------------------
// Lexical rule handlers.

std::string Tokenizer::__EOF("$");

// clang-format off
inline TokenType _lexRule1(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_66;
}

inline TokenType _lexRule2(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_67;
}

inline TokenType _lexRule3(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_68;
}

inline TokenType _lexRule4(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_69;
}

inline TokenType _lexRule5(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_70;
}

inline TokenType _lexRule6(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_71;
}

inline TokenType _lexRule7(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_72;
}

inline TokenType _lexRule8(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_73;
}

inline TokenType _lexRule9(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_74;
}

inline TokenType _lexRule10(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_75;
}

inline TokenType _lexRule11(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_76;
}

inline TokenType _lexRule12(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_77;
}

inline TokenType _lexRule13(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_78;
}

inline TokenType _lexRule14(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_79;
}

inline TokenType _lexRule15(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_80;
}

inline TokenType _lexRule16(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_81;
}

inline TokenType _lexRule17(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_82;
}

inline TokenType _lexRule18(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_83;
}

inline TokenType _lexRule19(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_84;
}

inline TokenType _lexRule20(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_85;
}

inline TokenType _lexRule21(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_86;
}

inline TokenType _lexRule22(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_87;
}

inline TokenType _lexRule23(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_88;
}

inline TokenType _lexRule24(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_89;
}

inline TokenType _lexRule25(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_90;
}

inline TokenType _lexRule26(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_91;
}

inline TokenType _lexRule27(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_92;
}

inline TokenType _lexRule28(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_93;
}

inline TokenType _lexRule29(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule30(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule31(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule32(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TYPE_BASE;
}

inline TokenType _lexRule33(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::STRING;
}

inline TokenType _lexRule34(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::BOOLEAN;
}

inline TokenType _lexRule35(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::REAL;
}

inline TokenType _lexRule36(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::INTEGER;
}

inline TokenType _lexRule37(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::IDENTIFIER;
}

inline TokenType _lexRule38(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SEMICOLON;
}

inline TokenType _lexRule39(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SEPARATOR;
}

inline TokenType _lexRule40(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::ADD;
}

inline TokenType _lexRule41(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SUB;
}

inline TokenType _lexRule42(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::MUL;
}

inline TokenType _lexRule43(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::DIV;
}
// clang-format on

// ------------------------------------------------------------------
// Lexical rules.

// clang-format off
std::array<LexRule, Tokenizer::LEX_RULES_COUNT> Tokenizer::lexRules_ = {{
  {std::regex(R"(^unit)"), &_lexRule1},
  {std::regex(R"(^uses)"), &_lexRule2},
  {std::regex(R"(^register)"), &_lexRule3},
  {std::regex(R"(^:)"), &_lexRule4},
  {std::regex(R"(^type)"), &_lexRule5},
  {std::regex(R"(^=)"), &_lexRule6},
  {std::regex(R"(^\()"), &_lexRule7},
  {std::regex(R"(^\))"), &_lexRule8},
  {std::regex(R"(^label)"), &_lexRule9},
  {std::regex(R"(^record)"), &_lexRule10},
  {std::regex(R"(^function)"), &_lexRule11},
  {std::regex(R"(^begin)"), &_lexRule12},
  {std::regex(R"(^end)"), &_lexRule13},
  {std::regex(R"(^class)"), &_lexRule14},
  {std::regex(R"(^interface)"), &_lexRule15},
  {std::regex(R"(^implementation)"), &_lexRule16},
  {std::regex(R"(^\$)"), &_lexRule17},
  {std::regex(R"(^,)"), &_lexRule18},
  {std::regex(R"(^\.)"), &_lexRule19},
  {std::regex(R"(^as)"), &_lexRule20},
  {std::regex(R"(^@)"), &_lexRule21},
  {std::regex(R"(^void)"), &_lexRule22},
  {std::regex(R"(^\[)"), &_lexRule23},
  {std::regex(R"(^\])"), &_lexRule24},
  {std::regex(R"(^return)"), &_lexRule25},
  {std::regex(R"(^var)"), &_lexRule26},
  {std::regex(R"(^set)"), &_lexRule27},
  {std::regex(R"(^default)"), &_lexRule28},
  {std::regex(R"(^\s+)"), &_lexRule29},
  {std::regex(R"(^\/\/.*)"), &_lexRule30},
  {std::regex(R"(^\{[^\}]*\})"), &_lexRule31},
  {std::regex(R"(^(integer|cardinal|real|char|string|boolean))"), &_lexRule32},
  {std::regex(R"(^(['"])(.*?[^\\])?(\\\\)*(\1))"), &_lexRule33},
  {std::regex(R"(^true|false)"), &_lexRule34},
  {std::regex(R"(^[0-9]+\.[0-9]+)"), &_lexRule35},
  {std::regex(R"(^[0-9]+)"), &_lexRule36},
  {std::regex(R"(^[a-zA-Z_][a-zA-Z0-9_]*)"), &_lexRule37},
  {std::regex(R"(^[;])"), &_lexRule38},
  {std::regex(R"(^\\)"), &_lexRule39},
  {std::regex(R"(^\+)"), &_lexRule40},
  {std::regex(R"(^-)"), &_lexRule41},
  {std::regex(R"(^\*)"), &_lexRule42},
  {std::regex(R"(^\/)"), &_lexRule43}
}};
std::map<TokenizerState, std::vector<size_t>> Tokenizer::lexRulesByStartConditions_ =  {{TokenizerState::INITIAL, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42}}};
// clang-format on

#endif
// clang-format on

#define POP_V()              \
  parser.valuesStack.back(); \
  parser.valuesStack.pop_back()

#define POP_T()              \
  parser.tokensStack.back(); \
  parser.tokensStack.pop_back()

#define PUSH_VR() parser.valuesStack.push_back(__)
#define PUSH_TR() parser.tokensStack.push_back(__)

/**
 * Parsing table type.
 */
enum class TE {
  Accept,
  Shift,
  Reduce,
  Transit,
};

/**
 * Parsing table entry.
 */
struct TableEntry {
  TE type;
  int value;
};

// clang-format off
class parser;
// clang-format on

using yyparse = parser;

typedef void (*ProductionHandler)(yyparse&);

/**
 * Encoded production.
 *
 * opcode - encoded index
 * rhsLength - length of the RHS to pop.
 */
struct Production {
  int opcode;
  int rhsLength;
  ProductionHandler handler;
};

// Key: Encoded symbol (terminal or non-terminal) index
// Value: TableEntry
using Row = std::map<int, TableEntry>;

/**
 * Parser class.
 */
// clang-format off
class parser {
  // clang-format on
 public:
  /**
   * Parsing values stack.
   */
  std::vector<Value> valuesStack;

  /**
   * Token values stack.
   */
  std::vector<std::string> tokensStack;

  /**
   * Parsing states stack.
   */
  std::vector<int> statesStack;

  /**
   * Tokenizer.
   */
  Tokenizer tokenizer;

  /**
   * Previous state to calculate the next one.
   */
  int previousState;

  /**
   * Parses a string.
   */
  Value parse(const std::string& str) {
    // clang-format off

    // clang-format on

    // Initialize the tokenizer and the string.
    tokenizer.initString(str);

    // Initialize the stacks.
    valuesStack.clear();
    tokensStack.clear();
    statesStack.clear();

    // Initial 0 state.
    statesStack.push_back(0);

    auto token = tokenizer.getNextToken();
    auto shiftedToken = token;

    // Main parsing loop.
    for (;;) {
      auto state = statesStack.back();
      auto column = (int)token->type;

      if (table_[state].count(column) == 0) {
        throwUnexpectedToken(token);
      }

      auto entry = table_[state].at(column);

      // Shift a token, go to state.
      if (entry.type == TE::Shift) {
        // Push token.
        tokensStack.push_back(token->value);

        // Push next state number: "s5" -> 5
        statesStack.push_back(entry.value);

        shiftedToken = token;
        token = tokenizer.getNextToken();
      }

      // Reduce by production.
      else if (entry.type == TE::Reduce) {
        auto productionNumber = entry.value;
        auto production = productions_[productionNumber];

        tokenizer.yytext = shiftedToken->value;

        auto rhsLength = production.rhsLength;
        while (rhsLength > 0) {
          statesStack.pop_back();
          rhsLength--;
        }

        // Call the handler.
        production.handler(*this);

        auto previousState = statesStack.back();

        auto symbolToReduceWith = production.opcode;
        auto nextStateEntry = table_[previousState].at(symbolToReduceWith);
        assert(nextStateEntry.type == TE::Transit);

        statesStack.push_back(nextStateEntry.value);
      }

      // Accept the string.
      else if (entry.type == TE::Accept) {
        // Pop state number.
        statesStack.pop_back();

        // Pop the parsed value.
        // clang-format off
        auto result = valuesStack.back(); valuesStack.pop_back();
        // clang-format on

        if (statesStack.size() != 1 || statesStack.back() != 0 ||
            tokenizer.hasMoreTokens()) {
          throwUnexpectedToken(token);
        }

        statesStack.pop_back();

        // clang-format off

        // clang-format on

        return result;
      }
    }
  }

 private:
  /**
   * Throws parser error on unexpected token.
   */
  [[noreturn]] void throwUnexpectedToken(SharedToken token) {
    if (token->type == TokenType::__EOF && !tokenizer.hasMoreTokens()) {
      std::string errMsg = "Unexpected end of input.\n";
      std::cerr << errMsg;
      throw std::runtime_error(errMsg.c_str());
    }
    tokenizer.throwUnexpectedToken(token->value, token->startLine,
                                   token->startColumn);
  }

  // clang-format off
  static constexpr size_t PRODUCTIONS_COUNT = 129;
  static std::array<Production, PRODUCTIONS_COUNT> productions_;

  static constexpr size_t ROWS_COUNT = 238;
  static std::array<Row, ROWS_COUNT> table_;
  // clang-format on
};

// ------------------------------------------------------------------
// Productions.

// clang-format off
void _handler1(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler2(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<ListNode>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler3(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_2);
		auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler4(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler5(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler6(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler7(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler8(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler9(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<ListNode>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler10(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_2);
		auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler11(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler12(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler13(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler14(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler15(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler16(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler17(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler18(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler19(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler20(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler21(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = std::make_shared<UnitNode>(as(ListNode, _2));

 // Semantic action epilogue.
PUSH_VR();

}

void _handler22(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = std::make_shared<UsesNode>(as(ListNode, _2));

 // Semantic action epilogue.
PUSH_VR();

}

void _handler23(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler24(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler25(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler26(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler27(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler28(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler29(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler30(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler31(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler32(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler33(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler34(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler35(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler36(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler37(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler38(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = std::make_shared<IdentifierNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler39(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = _2;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler40(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler41(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler42(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler43(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler44(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler45(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler46(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler47(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler48(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler49(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler50(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler51(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler52(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler53(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler54(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler55(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler56(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler57(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler58(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler59(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler60(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler61(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler62(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler63(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler64(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler65(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler66(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = _2;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler67(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler68(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler69(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler70(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
		auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler71(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler72(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler73(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler74(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler75(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler76(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler77(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler78(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler79(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler80(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler81(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler82(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler83(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler84(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler85(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler86(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler87(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
		auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler88(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler89(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler90(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler91(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler92(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler93(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler94(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler95(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler96(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler97(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<ListNode>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler98(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler99(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler100(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler101(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<ListNode>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler102(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

as(ListNode, _1)->list.push_back(_3);
    auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler103(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<ListNode>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler104(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler105(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler106(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

// size: INTEGER
    auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler107(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler108(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler109(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler110(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler111(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler112(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler113(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler114(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler115(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler116(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler117(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler118(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler119(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler120(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler121(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler122(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler123(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler124(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler125(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler126(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler127(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler128(yyparse& parser) {
// Semantic action prologue.
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}

void _handler129(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();
parser.valuesStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Node>();

 // Semantic action epilogue.
PUSH_VR();

}
// clang-format on

// clang-format off
std::array<Production, yyparse::PRODUCTIONS_COUNT> yyparse::productions_ = {{{-1, 1, &_handler1},
{0, 0, &_handler2},
{0, 2, &_handler3},
{1, 1, &_handler4},
{1, 1, &_handler5},
{1, 1, &_handler6},
{1, 1, &_handler7},
{1, 1, &_handler8},
{2, 0, &_handler9},
{2, 2, &_handler10},
{3, 1, &_handler11},
{3, 1, &_handler12},
{3, 1, &_handler13},
{3, 1, &_handler14},
{3, 1, &_handler15},
{4, 2, &_handler16},
{5, 2, &_handler17},
{6, 2, &_handler18},
{7, 2, &_handler19},
{8, 2, &_handler20},
{9, 3, &_handler21},
{10, 3, &_handler22},
{11, 10, &_handler23},
{11, 10, &_handler24},
{11, 10, &_handler25},
{11, 8, &_handler26},
{11, 8, &_handler27},
{11, 8, &_handler28},
{11, 8, &_handler29},
{11, 8, &_handler30},
{12, 1, &_handler31},
{12, 1, &_handler32},
{12, 1, &_handler33},
{13, 1, &_handler34},
{13, 1, &_handler35},
{13, 1, &_handler36},
{13, 1, &_handler37},
{14, 1, &_handler38},
{14, 2, &_handler39},
{15, 1, &_handler40},
{15, 3, &_handler41},
{16, 1, &_handler42},
{16, 3, &_handler43},
{17, 1, &_handler44},
{17, 3, &_handler45},
{18, 1, &_handler46},
{18, 3, &_handler47},
{19, 1, &_handler48},
{19, 3, &_handler49},
{19, 5, &_handler50},
{20, 1, &_handler51},
{20, 3, &_handler52},
{21, 1, &_handler53},
{21, 3, &_handler54},
{22, 1, &_handler55},
{22, 3, &_handler56},
{23, 0, &_handler57},
{23, 2, &_handler58},
{23, 3, &_handler59},
{24, 0, &_handler60},
{24, 3, &_handler61},
{24, 5, &_handler62},
{25, 1, &_handler63},
{25, 2, &_handler64},
{25, 3, &_handler65},
{25, 4, &_handler66},
{26, 1, &_handler67},
{26, 3, &_handler68},
{27, 1, &_handler69},
{27, 3, &_handler70},
{28, 1, &_handler71},
{28, 3, &_handler72},
{29, 0, &_handler73},
{29, 1, &_handler74},
{30, 1, &_handler75},
{30, 1, &_handler76},
{30, 1, &_handler77},
{30, 1, &_handler78},
{31, 1, &_handler79},
{32, 1, &_handler80},
{32, 4, &_handler81},
{33, 1, &_handler82},
{33, 3, &_handler83},
{34, 1, &_handler84},
{34, 4, &_handler85},
{35, 1, &_handler86},
{35, 3, &_handler87},
{36, 1, &_handler88},
{36, 1, &_handler89},
{36, 4, &_handler90},
{36, 1, &_handler91},
{36, 3, &_handler92},
{36, 3, &_handler93},
{36, 3, &_handler94},
{36, 3, &_handler95},
{36, 3, &_handler96},
{37, 0, &_handler97},
{37, 1, &_handler98},
{37, 3, &_handler99},
{38, 2, &_handler100},
{39, 1, &_handler101},
{39, 3, &_handler102},
{40, 0, &_handler103},
{40, 1, &_handler104},
{41, 0, &_handler105},
{41, 1, &_handler106},
{42, 0, &_handler107},
{42, 1, &_handler108},
{43, 0, &_handler109},
{43, 1, &_handler110},
{43, 3, &_handler111},
{43, 4, &_handler112},
{44, 2, &_handler113},
{45, 2, &_handler114},
{46, 3, &_handler115},
{47, 3, &_handler116},
{47, 5, &_handler117},
{48, 1, &_handler118},
{48, 3, &_handler119},
{49, 1, &_handler120},
{49, 3, &_handler121},
{49, 3, &_handler122},
{49, 5, &_handler123},
{50, 1, &_handler124},
{50, 3, &_handler125},
{51, 3, &_handler126},
{52, 3, &_handler127},
{53, 4, &_handler128},
{53, 5, &_handler129}}};
// clang-format on

// ------------------------------------------------------------------
// Parsing table.

// clang-format off
std::array<Row, yyparse::ROWS_COUNT> yyparse::table_ = {
    Row {{0, {TE::Transit, 1}}, {66, {TE::Reduce, 1}}, {67, {TE::Reduce, 1}}, {68, {TE::Reduce, 1}}, {91, {TE::Reduce, 1}}, {92, {TE::Reduce, 1}}, {94, {TE::Reduce, 1}}},
    Row {{1, {TE::Transit, 2}}, {4, {TE::Transit, 6}}, {5, {TE::Transit, 7}}, {9, {TE::Transit, 3}}, {10, {TE::Transit, 4}}, {11, {TE::Transit, 5}}, {44, {TE::Transit, 11}}, {45, {TE::Transit, 13}}, {66, {TE::Shift, 8}}, {67, {TE::Shift, 9}}, {68, {TE::Shift, 10}}, {91, {TE::Shift, 12}}, {92, {TE::Shift, 14}}, {94, {TE::Accept, 0}}},
    Row {{66, {TE::Reduce, 2}}, {67, {TE::Reduce, 2}}, {68, {TE::Reduce, 2}}, {91, {TE::Reduce, 2}}, {92, {TE::Reduce, 2}}, {94, {TE::Reduce, 2}}},
    Row {{66, {TE::Reduce, 3}}, {67, {TE::Reduce, 3}}, {68, {TE::Reduce, 3}}, {91, {TE::Reduce, 3}}, {92, {TE::Reduce, 3}}, {94, {TE::Reduce, 3}}},
    Row {{66, {TE::Reduce, 4}}, {67, {TE::Reduce, 4}}, {68, {TE::Reduce, 4}}, {91, {TE::Reduce, 4}}, {92, {TE::Reduce, 4}}, {94, {TE::Reduce, 4}}},
    Row {{66, {TE::Reduce, 5}}, {67, {TE::Reduce, 5}}, {68, {TE::Reduce, 5}}, {91, {TE::Reduce, 5}}, {92, {TE::Reduce, 5}}, {94, {TE::Reduce, 5}}},
    Row {{66, {TE::Reduce, 6}}, {67, {TE::Reduce, 6}}, {68, {TE::Reduce, 6}}, {91, {TE::Reduce, 6}}, {92, {TE::Reduce, 6}}, {94, {TE::Reduce, 6}}},
    Row {{66, {TE::Reduce, 7}}, {67, {TE::Reduce, 7}}, {68, {TE::Reduce, 7}}, {91, {TE::Reduce, 7}}, {92, {TE::Reduce, 7}}, {94, {TE::Reduce, 7}}},
    Row {{14, {TE::Transit, 16}}, {16, {TE::Transit, 15}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 26}}, {17, {TE::Transit, 25}}, {19, {TE::Transit, 24}}, {20, {TE::Transit, 23}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{14, {TE::Transit, 44}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{54, {TE::Shift, 174}}},
    Row {{14, {TE::Transit, 178}}, {25, {TE::Transit, 177}}, {26, {TE::Transit, 176}}, {27, {TE::Transit, 175}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}, {86, {TE::Shift, 179}}},
    Row {{54, {TE::Shift, 194}}},
    Row {{14, {TE::Transit, 178}}, {25, {TE::Transit, 177}}, {26, {TE::Transit, 176}}, {27, {TE::Transit, 195}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}, {86, {TE::Shift, 179}}},
    Row {{54, {TE::Shift, 19}}, {60, {TE::Shift, 20}}},
    Row {{54, {TE::Reduce, 41}}, {60, {TE::Reduce, 41}}},
    Row {{54, {TE::Reduce, 37}}, {60, {TE::Reduce, 37}}, {62, {TE::Reduce, 37}}, {63, {TE::Reduce, 37}}, {64, {TE::Reduce, 37}}, {65, {TE::Reduce, 37}}, {69, {TE::Reduce, 37}}, {71, {TE::Reduce, 37}}, {72, {TE::Reduce, 37}}, {73, {TE::Reduce, 37}}, {77, {TE::Reduce, 37}}, {83, {TE::Reduce, 37}}, {84, {TE::Reduce, 37}}, {85, {TE::Reduce, 37}}, {88, {TE::Reduce, 37}}, {89, {TE::Reduce, 37}}, {93, {TE::Reduce, 37}}},
    Row {{14, {TE::Transit, 22}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{66, {TE::Reduce, 20}}, {67, {TE::Reduce, 20}}, {68, {TE::Reduce, 20}}, {91, {TE::Reduce, 20}}, {92, {TE::Reduce, 20}}, {94, {TE::Reduce, 20}}},
    Row {{14, {TE::Transit, 21}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{54, {TE::Reduce, 42}}, {60, {TE::Reduce, 42}}, {84, {TE::Reduce, 42}}},
    Row {{54, {TE::Reduce, 38}}, {60, {TE::Reduce, 38}}, {62, {TE::Reduce, 38}}, {63, {TE::Reduce, 38}}, {64, {TE::Reduce, 38}}, {65, {TE::Reduce, 38}}, {69, {TE::Reduce, 38}}, {71, {TE::Reduce, 38}}, {72, {TE::Reduce, 38}}, {73, {TE::Reduce, 38}}, {77, {TE::Reduce, 38}}, {83, {TE::Reduce, 38}}, {84, {TE::Reduce, 38}}, {85, {TE::Reduce, 38}}, {88, {TE::Reduce, 38}}, {89, {TE::Reduce, 38}}, {93, {TE::Reduce, 38}}},
    Row {{54, {TE::Shift, 28}}, {83, {TE::Shift, 29}}},
    Row {{54, {TE::Reduce, 50}}, {83, {TE::Reduce, 50}}},
    Row {{54, {TE::Reduce, 47}}, {83, {TE::Reduce, 47}}, {85, {TE::Shift, 31}}},
    Row {{60, {TE::Shift, 20}}, {84, {TE::Shift, 33}}},
    Row {{54, {TE::Reduce, 43}}, {60, {TE::Reduce, 41}}, {62, {TE::Reduce, 43}}, {63, {TE::Reduce, 43}}, {64, {TE::Reduce, 43}}, {65, {TE::Reduce, 43}}, {71, {TE::Reduce, 43}}, {72, {TE::Reduce, 43}}, {73, {TE::Reduce, 43}}, {77, {TE::Reduce, 43}}, {83, {TE::Reduce, 43}}, {84, {TE::Reduce, 41}}, {85, {TE::Reduce, 43}}, {88, {TE::Reduce, 43}}, {89, {TE::Reduce, 43}}, {93, {TE::Reduce, 43}}},
    Row {{66, {TE::Reduce, 21}}, {67, {TE::Reduce, 21}}, {68, {TE::Reduce, 21}}, {91, {TE::Reduce, 21}}, {92, {TE::Reduce, 21}}, {94, {TE::Reduce, 21}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 26}}, {17, {TE::Transit, 25}}, {19, {TE::Transit, 30}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{54, {TE::Reduce, 51}}, {83, {TE::Reduce, 51}}},
    Row {{14, {TE::Transit, 32}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{54, {TE::Reduce, 48}}, {83, {TE::Reduce, 48}}},
    Row {{14, {TE::Transit, 35}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 34}}, {82, {TE::Shift, 18}}},
    Row {{14, {TE::Transit, 38}}, {21, {TE::Transit, 37}}, {22, {TE::Transit, 36}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{54, {TE::Reduce, 44}}, {62, {TE::Reduce, 44}}, {63, {TE::Reduce, 44}}, {64, {TE::Reduce, 44}}, {65, {TE::Reduce, 44}}, {71, {TE::Reduce, 44}}, {72, {TE::Reduce, 44}}, {73, {TE::Reduce, 44}}, {77, {TE::Reduce, 44}}, {83, {TE::Reduce, 44}}, {85, {TE::Reduce, 44}}, {88, {TE::Reduce, 44}}, {89, {TE::Reduce, 44}}, {93, {TE::Reduce, 44}}},
    Row {{73, {TE::Shift, 39}}, {83, {TE::Shift, 40}}},
    Row {{73, {TE::Reduce, 54}}, {83, {TE::Reduce, 54}}},
    Row {{73, {TE::Reduce, 52}}, {83, {TE::Reduce, 52}}, {85, {TE::Shift, 42}}},
    Row {{54, {TE::Reduce, 49}}, {83, {TE::Reduce, 49}}},
    Row {{14, {TE::Transit, 38}}, {21, {TE::Transit, 41}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{73, {TE::Reduce, 55}}, {83, {TE::Reduce, 55}}},
    Row {{14, {TE::Transit, 43}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{73, {TE::Reduce, 53}}, {83, {TE::Reduce, 53}}},
    Row {{69, {TE::Shift, 45}}},
    Row {{70, {TE::Shift, 46}}, {74, {TE::Shift, 47}}, {75, {TE::Shift, 48}}, {76, {TE::Shift, 49}}, {79, {TE::Shift, 50}}, {80, {TE::Shift, 51}}, {81, {TE::Shift, 52}}},
    Row {{23, {TE::Transit, 53}}, {71, {TE::Reduce, 56}}, {72, {TE::Shift, 54}}},
    Row {{23, {TE::Transit, 81}}, {71, {TE::Reduce, 56}}, {72, {TE::Shift, 54}}},
    Row {{23, {TE::Transit, 90}}, {71, {TE::Reduce, 56}}, {72, {TE::Shift, 54}}},
    Row {{24, {TE::Transit, 219}}, {71, {TE::Reduce, 59}}, {72, {TE::Shift, 156}}, {77, {TE::Reduce, 59}}},
    Row {{23, {TE::Transit, 226}}, {72, {TE::Shift, 54}}, {77, {TE::Reduce, 56}}},
    Row {{23, {TE::Transit, 230}}, {72, {TE::Shift, 54}}, {77, {TE::Reduce, 56}}},
    Row {{23, {TE::Transit, 234}}, {72, {TE::Shift, 54}}, {77, {TE::Reduce, 56}}},
    Row {{71, {TE::Shift, 55}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 77}}, {18, {TE::Transit, 76}}, {59, {TE::Shift, 17}}, {73, {TE::Shift, 75}}, {82, {TE::Shift, 18}}},
    Row {{72, {TE::Shift, 56}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 62}}, {30, {TE::Transit, 58}}, {31, {TE::Transit, 59}}, {32, {TE::Transit, 60}}, {33, {TE::Transit, 57}}, {59, {TE::Shift, 17}}, {61, {TE::Shift, 64}}, {76, {TE::Shift, 61}}, {82, {TE::Shift, 18}}, {87, {TE::Shift, 63}}},
    Row {{73, {TE::Shift, 66}}, {83, {TE::Shift, 67}}},
    Row {{73, {TE::Reduce, 81}}, {83, {TE::Reduce, 81}}},
    Row {{54, {TE::Reduce, 74}}, {71, {TE::Reduce, 74}}, {73, {TE::Reduce, 74}}, {77, {TE::Reduce, 74}}, {83, {TE::Reduce, 74}}, {88, {TE::Reduce, 74}}, {93, {TE::Reduce, 74}}},
    Row {{54, {TE::Reduce, 75}}, {71, {TE::Reduce, 75}}, {72, {TE::Shift, 70}}, {73, {TE::Reduce, 75}}, {77, {TE::Reduce, 75}}, {83, {TE::Reduce, 75}}, {88, {TE::Reduce, 75}}, {93, {TE::Reduce, 75}}},
    Row {{54, {TE::Reduce, 76}}, {71, {TE::Reduce, 76}}, {73, {TE::Reduce, 76}}, {77, {TE::Reduce, 76}}, {83, {TE::Reduce, 76}}, {88, {TE::Reduce, 76}}, {93, {TE::Reduce, 76}}},
    Row {{54, {TE::Reduce, 77}}, {71, {TE::Reduce, 77}}, {73, {TE::Reduce, 77}}, {77, {TE::Reduce, 77}}, {83, {TE::Reduce, 77}}, {88, {TE::Reduce, 77}}, {93, {TE::Reduce, 77}}},
    Row {{54, {TE::Reduce, 78}}, {71, {TE::Reduce, 78}}, {73, {TE::Reduce, 78}}, {77, {TE::Reduce, 78}}, {83, {TE::Reduce, 78}}, {88, {TE::Reduce, 78}}, {93, {TE::Reduce, 78}}},
    Row {{54, {TE::Reduce, 79}}, {71, {TE::Reduce, 79}}, {72, {TE::Reduce, 79}}, {73, {TE::Reduce, 79}}, {77, {TE::Reduce, 79}}, {83, {TE::Reduce, 79}}, {88, {TE::Reduce, 79}}, {93, {TE::Reduce, 79}}},
    Row {{60, {TE::Shift, 20}}, {84, {TE::Shift, 74}}},
    Row {{54, {TE::Shift, 68}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 62}}, {30, {TE::Transit, 69}}, {31, {TE::Transit, 59}}, {32, {TE::Transit, 60}}, {59, {TE::Shift, 17}}, {61, {TE::Shift, 64}}, {76, {TE::Shift, 61}}, {82, {TE::Shift, 18}}, {87, {TE::Shift, 63}}},
    Row {{66, {TE::Reduce, 22}}, {67, {TE::Reduce, 22}}, {68, {TE::Reduce, 22}}, {91, {TE::Reduce, 22}}, {92, {TE::Reduce, 22}}, {94, {TE::Reduce, 22}}},
    Row {{73, {TE::Reduce, 82}}, {83, {TE::Reduce, 82}}},
    Row {{41, {TE::Transit, 71}}, {56, {TE::Shift, 72}}, {73, {TE::Reduce, 104}}},
    Row {{73, {TE::Shift, 73}}},
    Row {{73, {TE::Reduce, 105}}},
    Row {{54, {TE::Reduce, 80}}, {71, {TE::Reduce, 80}}, {72, {TE::Reduce, 80}}, {73, {TE::Reduce, 80}}, {77, {TE::Reduce, 80}}, {83, {TE::Reduce, 80}}, {88, {TE::Reduce, 80}}, {93, {TE::Reduce, 80}}},
    Row {{14, {TE::Transit, 35}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{71, {TE::Reduce, 57}}, {77, {TE::Reduce, 57}}},
    Row {{73, {TE::Shift, 78}}, {83, {TE::Shift, 79}}},
    Row {{73, {TE::Reduce, 45}}, {83, {TE::Reduce, 45}}},
    Row {{71, {TE::Reduce, 58}}, {77, {TE::Reduce, 58}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 80}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{73, {TE::Reduce, 46}}, {83, {TE::Reduce, 46}}},
    Row {{71, {TE::Shift, 82}}},
    Row {{72, {TE::Shift, 83}}},
    Row {{14, {TE::Transit, 85}}, {15, {TE::Transit, 84}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{73, {TE::Shift, 86}}, {83, {TE::Shift, 87}}},
    Row {{73, {TE::Reduce, 39}}, {83, {TE::Reduce, 39}}},
    Row {{54, {TE::Shift, 88}}},
    Row {{14, {TE::Transit, 89}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{66, {TE::Reduce, 23}}, {67, {TE::Reduce, 23}}, {68, {TE::Reduce, 23}}, {91, {TE::Reduce, 23}}, {92, {TE::Reduce, 23}}, {94, {TE::Reduce, 23}}},
    Row {{73, {TE::Reduce, 40}}, {83, {TE::Reduce, 40}}},
    Row {{71, {TE::Shift, 91}}},
    Row {{72, {TE::Shift, 92}}},
    Row {{14, {TE::Transit, 95}}, {49, {TE::Transit, 94}}, {50, {TE::Transit, 93}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{73, {TE::Shift, 96}}, {83, {TE::Shift, 97}}},
    Row {{73, {TE::Reduce, 123}}, {83, {TE::Reduce, 123}}},
    Row {{69, {TE::Shift, 100}}, {73, {TE::Reduce, 119}}, {83, {TE::Reduce, 119}}, {93, {TE::Shift, 101}}},
    Row {{54, {TE::Shift, 98}}},
    Row {{14, {TE::Transit, 95}}, {49, {TE::Transit, 99}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{66, {TE::Reduce, 24}}, {67, {TE::Reduce, 24}}, {68, {TE::Reduce, 24}}, {91, {TE::Reduce, 24}}, {92, {TE::Reduce, 24}}, {94, {TE::Reduce, 24}}},
    Row {{73, {TE::Reduce, 124}}, {83, {TE::Reduce, 124}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 62}}, {30, {TE::Transit, 103}}, {31, {TE::Transit, 59}}, {32, {TE::Transit, 60}}, {43, {TE::Transit, 102}}, {59, {TE::Shift, 17}}, {61, {TE::Shift, 64}}, {72, {TE::Shift, 104}}, {73, {TE::Reduce, 108}}, {76, {TE::Shift, 61}}, {82, {TE::Shift, 18}}, {83, {TE::Reduce, 108}}, {87, {TE::Shift, 63}}, {88, {TE::Reduce, 108}}, {93, {TE::Reduce, 108}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 218}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{73, {TE::Reduce, 120}}, {83, {TE::Reduce, 120}}, {88, {TE::Shift, 106}}, {93, {TE::Shift, 105}}},
    Row {{54, {TE::Reduce, 109}}, {71, {TE::Reduce, 109}}, {73, {TE::Reduce, 109}}, {77, {TE::Reduce, 109}}, {83, {TE::Reduce, 109}}, {88, {TE::Reduce, 109}}, {93, {TE::Reduce, 109}}},
    Row {{41, {TE::Transit, 189}}, {56, {TE::Shift, 72}}, {73, {TE::Reduce, 104}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 107}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{42, {TE::Transit, 186}}, {56, {TE::Shift, 187}}, {89, {TE::Reduce, 106}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 122}}, {83, {TE::Reduce, 122}}},
    Row {{54, {TE::Reduce, 87}}, {62, {TE::Reduce, 87}}, {63, {TE::Reduce, 87}}, {64, {TE::Reduce, 87}}, {65, {TE::Reduce, 87}}, {73, {TE::Reduce, 87}}, {83, {TE::Reduce, 87}}, {89, {TE::Reduce, 87}}},
    Row {{54, {TE::Reduce, 88}}, {62, {TE::Reduce, 88}}, {63, {TE::Reduce, 88}}, {64, {TE::Reduce, 88}}, {65, {TE::Reduce, 88}}, {72, {TE::Shift, 130}}, {73, {TE::Reduce, 88}}, {83, {TE::Reduce, 88}}, {88, {TE::Shift, 131}}, {89, {TE::Reduce, 88}}},
    Row {{54, {TE::Reduce, 90}}, {62, {TE::Reduce, 90}}, {63, {TE::Reduce, 90}}, {64, {TE::Reduce, 90}}, {65, {TE::Reduce, 90}}, {73, {TE::Reduce, 90}}, {83, {TE::Reduce, 90}}, {89, {TE::Reduce, 90}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 140}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 138}}, {47, {TE::Transit, 141}}, {48, {TE::Transit, 139}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{54, {TE::Reduce, 30}}, {62, {TE::Reduce, 30}}, {63, {TE::Reduce, 30}}, {64, {TE::Reduce, 30}}, {65, {TE::Reduce, 30}}, {73, {TE::Reduce, 30}}, {83, {TE::Reduce, 30}}, {89, {TE::Reduce, 30}}},
    Row {{54, {TE::Reduce, 31}}, {62, {TE::Reduce, 31}}, {63, {TE::Reduce, 31}}, {64, {TE::Reduce, 31}}, {65, {TE::Reduce, 31}}, {73, {TE::Reduce, 31}}, {83, {TE::Reduce, 31}}, {89, {TE::Reduce, 31}}},
    Row {{54, {TE::Reduce, 32}}, {62, {TE::Reduce, 32}}, {63, {TE::Reduce, 32}}, {64, {TE::Reduce, 32}}, {65, {TE::Reduce, 32}}, {73, {TE::Reduce, 32}}, {83, {TE::Reduce, 32}}, {89, {TE::Reduce, 32}}},
    Row {{54, {TE::Reduce, 33}}, {62, {TE::Reduce, 33}}, {63, {TE::Reduce, 33}}, {64, {TE::Reduce, 33}}, {65, {TE::Reduce, 33}}, {73, {TE::Reduce, 33}}, {83, {TE::Reduce, 33}}, {89, {TE::Reduce, 33}}},
    Row {{54, {TE::Reduce, 34}}, {62, {TE::Reduce, 34}}, {63, {TE::Reduce, 34}}, {64, {TE::Reduce, 34}}, {65, {TE::Reduce, 34}}, {73, {TE::Reduce, 34}}, {83, {TE::Reduce, 34}}, {89, {TE::Reduce, 34}}},
    Row {{54, {TE::Reduce, 35}}, {62, {TE::Reduce, 35}}, {63, {TE::Reduce, 35}}, {64, {TE::Reduce, 35}}, {65, {TE::Reduce, 35}}, {73, {TE::Reduce, 35}}, {83, {TE::Reduce, 35}}, {89, {TE::Reduce, 35}}},
    Row {{54, {TE::Reduce, 36}}, {62, {TE::Reduce, 36}}, {63, {TE::Reduce, 36}}, {64, {TE::Reduce, 36}}, {65, {TE::Reduce, 36}}, {73, {TE::Reduce, 36}}, {83, {TE::Reduce, 36}}, {89, {TE::Reduce, 36}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 151}}, {37, {TE::Transit, 150}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {83, {TE::Reduce, 96}}, {88, {TE::Shift, 119}}, {89, {TE::Reduce, 96}}},
    Row {{54, {TE::Reduce, 83}}, {62, {TE::Reduce, 83}}, {63, {TE::Reduce, 83}}, {64, {TE::Reduce, 83}}, {65, {TE::Reduce, 83}}, {71, {TE::Reduce, 83}}, {72, {TE::Reduce, 83}}, {73, {TE::Reduce, 83}}, {83, {TE::Reduce, 83}}, {88, {TE::Reduce, 83}}, {89, {TE::Reduce, 83}}},
    Row {{24, {TE::Transit, 155}}, {71, {TE::Reduce, 59}}, {72, {TE::Shift, 156}}, {77, {TE::Reduce, 59}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 126}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 127}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 128}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 129}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{54, {TE::Reduce, 92}}, {62, {TE::Reduce, 92}}, {63, {TE::Reduce, 92}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 92}}, {83, {TE::Reduce, 92}}, {89, {TE::Reduce, 92}}},
    Row {{54, {TE::Reduce, 93}}, {62, {TE::Reduce, 93}}, {63, {TE::Reduce, 93}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 93}}, {83, {TE::Reduce, 93}}, {89, {TE::Reduce, 93}}},
    Row {{54, {TE::Reduce, 94}}, {62, {TE::Reduce, 94}}, {63, {TE::Reduce, 94}}, {64, {TE::Reduce, 94}}, {65, {TE::Reduce, 94}}, {73, {TE::Reduce, 94}}, {83, {TE::Reduce, 94}}, {89, {TE::Reduce, 94}}},
    Row {{54, {TE::Reduce, 95}}, {62, {TE::Reduce, 95}}, {63, {TE::Reduce, 95}}, {64, {TE::Reduce, 95}}, {65, {TE::Reduce, 95}}, {73, {TE::Reduce, 95}}, {83, {TE::Reduce, 95}}, {89, {TE::Reduce, 95}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 134}}, {39, {TE::Transit, 133}}, {40, {TE::Transit, 132}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {73, {TE::Reduce, 102}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 197}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{73, {TE::Shift, 135}}},
    Row {{73, {TE::Reduce, 103}}, {83, {TE::Shift, 136}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 100}}, {83, {TE::Reduce, 100}}},
    Row {{54, {TE::Reduce, 89}}, {62, {TE::Reduce, 89}}, {63, {TE::Reduce, 89}}, {64, {TE::Reduce, 89}}, {65, {TE::Reduce, 89}}, {73, {TE::Reduce, 89}}, {83, {TE::Reduce, 89}}, {89, {TE::Reduce, 89}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 137}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 101}}, {83, {TE::Reduce, 101}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Shift, 142}}},
    Row {{73, {TE::Shift, 143}}, {83, {TE::Shift, 144}}},
    Row {{60, {TE::Reduce, 41}}, {62, {TE::Reduce, 43}}, {63, {TE::Reduce, 43}}, {64, {TE::Reduce, 43}}, {65, {TE::Reduce, 43}}, {69, {TE::Shift, 148}}, {71, {TE::Shift, 147}}, {72, {TE::Reduce, 43}}, {73, {TE::Reduce, 43}}, {84, {TE::Reduce, 41}}, {88, {TE::Reduce, 43}}},
    Row {{73, {TE::Reduce, 117}}, {83, {TE::Reduce, 117}}},
    Row {{54, {TE::Reduce, 91}}, {62, {TE::Reduce, 91}}, {63, {TE::Reduce, 91}}, {64, {TE::Reduce, 91}}, {65, {TE::Reduce, 91}}, {73, {TE::Reduce, 91}}, {83, {TE::Reduce, 91}}, {89, {TE::Reduce, 91}}},
    Row {{54, {TE::Reduce, 126}}, {62, {TE::Reduce, 126}}, {63, {TE::Reduce, 126}}, {64, {TE::Reduce, 126}}, {65, {TE::Reduce, 126}}, {73, {TE::Reduce, 126}}, {83, {TE::Reduce, 126}}, {89, {TE::Reduce, 126}}},
    Row {{14, {TE::Transit, 146}}, {47, {TE::Transit, 145}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{73, {TE::Reduce, 118}}, {83, {TE::Reduce, 118}}},
    Row {{69, {TE::Shift, 148}}, {71, {TE::Shift, 147}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 149}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 62}}, {30, {TE::Transit, 103}}, {31, {TE::Transit, 59}}, {32, {TE::Transit, 60}}, {43, {TE::Transit, 215}}, {59, {TE::Shift, 17}}, {61, {TE::Shift, 64}}, {71, {TE::Reduce, 108}}, {72, {TE::Shift, 104}}, {76, {TE::Shift, 61}}, {82, {TE::Shift, 18}}, {87, {TE::Shift, 63}}, {88, {TE::Reduce, 108}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 115}}, {83, {TE::Reduce, 115}}},
    Row {{83, {TE::Shift, 153}}, {89, {TE::Shift, 152}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {83, {TE::Reduce, 97}}, {89, {TE::Reduce, 97}}},
    Row {{54, {TE::Reduce, 125}}, {62, {TE::Reduce, 125}}, {63, {TE::Reduce, 125}}, {64, {TE::Reduce, 125}}, {65, {TE::Reduce, 125}}, {73, {TE::Reduce, 125}}, {83, {TE::Reduce, 125}}, {89, {TE::Reduce, 125}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 154}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {83, {TE::Reduce, 98}}, {89, {TE::Reduce, 98}}},
    Row {{71, {TE::Shift, 157}}, {77, {TE::Shift, 158}}},
    Row {{14, {TE::Transit, 178}}, {25, {TE::Transit, 177}}, {26, {TE::Transit, 208}}, {27, {TE::Transit, 209}}, {28, {TE::Transit, 207}}, {29, {TE::Transit, 206}}, {59, {TE::Shift, 17}}, {73, {TE::Reduce, 72}}, {82, {TE::Shift, 18}}, {86, {TE::Shift, 179}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 159}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{2, {TE::Transit, 160}}, {55, {TE::Reduce, 8}}, {56, {TE::Reduce, 8}}, {57, {TE::Reduce, 8}}, {58, {TE::Reduce, 8}}, {59, {TE::Reduce, 8}}, {72, {TE::Reduce, 8}}, {76, {TE::Reduce, 8}}, {78, {TE::Reduce, 8}}, {82, {TE::Reduce, 8}}, {88, {TE::Reduce, 8}}, {90, {TE::Reduce, 8}}, {91, {TE::Reduce, 8}}, {92, {TE::Reduce, 8}}},
    Row {{54, {TE::Reduce, 127}}, {62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 127}}, {83, {TE::Reduce, 127}}, {89, {TE::Reduce, 127}}},
    Row {{3, {TE::Transit, 162}}, {4, {TE::Transit, 163}}, {5, {TE::Transit, 164}}, {6, {TE::Transit, 166}}, {7, {TE::Transit, 165}}, {8, {TE::Transit, 167}}, {12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 169}}, {35, {TE::Transit, 171}}, {36, {TE::Transit, 168}}, {38, {TE::Transit, 172}}, {44, {TE::Transit, 11}}, {45, {TE::Transit, 13}}, {46, {TE::Transit, 170}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {78, {TE::Shift, 161}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}, {90, {TE::Shift, 173}}, {91, {TE::Shift, 12}}, {92, {TE::Shift, 14}}},
    Row {{54, {TE::Reduce, 128}}, {62, {TE::Reduce, 128}}, {63, {TE::Reduce, 128}}, {64, {TE::Reduce, 128}}, {65, {TE::Reduce, 128}}, {73, {TE::Reduce, 128}}, {83, {TE::Reduce, 128}}, {89, {TE::Reduce, 128}}},
    Row {{55, {TE::Reduce, 9}}, {56, {TE::Reduce, 9}}, {57, {TE::Reduce, 9}}, {58, {TE::Reduce, 9}}, {59, {TE::Reduce, 9}}, {72, {TE::Reduce, 9}}, {76, {TE::Reduce, 9}}, {78, {TE::Reduce, 9}}, {82, {TE::Reduce, 9}}, {88, {TE::Reduce, 9}}, {90, {TE::Reduce, 9}}, {91, {TE::Reduce, 9}}, {92, {TE::Reduce, 9}}},
    Row {{55, {TE::Reduce, 10}}, {56, {TE::Reduce, 10}}, {57, {TE::Reduce, 10}}, {58, {TE::Reduce, 10}}, {59, {TE::Reduce, 10}}, {72, {TE::Reduce, 10}}, {76, {TE::Reduce, 10}}, {78, {TE::Reduce, 10}}, {82, {TE::Reduce, 10}}, {88, {TE::Reduce, 10}}, {90, {TE::Reduce, 10}}, {91, {TE::Reduce, 10}}, {92, {TE::Reduce, 10}}},
    Row {{55, {TE::Reduce, 11}}, {56, {TE::Reduce, 11}}, {57, {TE::Reduce, 11}}, {58, {TE::Reduce, 11}}, {59, {TE::Reduce, 11}}, {72, {TE::Reduce, 11}}, {76, {TE::Reduce, 11}}, {78, {TE::Reduce, 11}}, {82, {TE::Reduce, 11}}, {88, {TE::Reduce, 11}}, {90, {TE::Reduce, 11}}, {91, {TE::Reduce, 11}}, {92, {TE::Reduce, 11}}},
    Row {{55, {TE::Reduce, 12}}, {56, {TE::Reduce, 12}}, {57, {TE::Reduce, 12}}, {58, {TE::Reduce, 12}}, {59, {TE::Reduce, 12}}, {72, {TE::Reduce, 12}}, {76, {TE::Reduce, 12}}, {78, {TE::Reduce, 12}}, {82, {TE::Reduce, 12}}, {88, {TE::Reduce, 12}}, {90, {TE::Reduce, 12}}, {91, {TE::Reduce, 12}}, {92, {TE::Reduce, 12}}},
    Row {{55, {TE::Reduce, 13}}, {56, {TE::Reduce, 13}}, {57, {TE::Reduce, 13}}, {58, {TE::Reduce, 13}}, {59, {TE::Reduce, 13}}, {72, {TE::Reduce, 13}}, {76, {TE::Reduce, 13}}, {78, {TE::Reduce, 13}}, {82, {TE::Reduce, 13}}, {88, {TE::Reduce, 13}}, {90, {TE::Reduce, 13}}, {91, {TE::Reduce, 13}}, {92, {TE::Reduce, 13}}},
    Row {{55, {TE::Reduce, 14}}, {56, {TE::Reduce, 14}}, {57, {TE::Reduce, 14}}, {58, {TE::Reduce, 14}}, {59, {TE::Reduce, 14}}, {72, {TE::Reduce, 14}}, {76, {TE::Reduce, 14}}, {78, {TE::Reduce, 14}}, {82, {TE::Reduce, 14}}, {88, {TE::Reduce, 14}}, {90, {TE::Reduce, 14}}, {91, {TE::Reduce, 14}}, {92, {TE::Reduce, 14}}},
    Row {{54, {TE::Shift, 196}}, {62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}},
    Row {{54, {TE::Reduce, 88}}, {62, {TE::Reduce, 88}}, {63, {TE::Reduce, 88}}, {64, {TE::Reduce, 88}}, {65, {TE::Reduce, 88}}, {71, {TE::Reduce, 85}}, {72, {TE::Shift, 130}}, {83, {TE::Reduce, 85}}, {88, {TE::Shift, 131}}},
    Row {{54, {TE::Shift, 199}}},
    Row {{71, {TE::Shift, 200}}, {83, {TE::Shift, 201}}},
    Row {{54, {TE::Shift, 204}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 205}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{55, {TE::Reduce, 15}}, {56, {TE::Reduce, 15}}, {57, {TE::Reduce, 15}}, {58, {TE::Reduce, 15}}, {59, {TE::Reduce, 15}}, {66, {TE::Reduce, 15}}, {67, {TE::Reduce, 15}}, {68, {TE::Reduce, 15}}, {72, {TE::Reduce, 15}}, {76, {TE::Reduce, 15}}, {78, {TE::Reduce, 15}}, {82, {TE::Reduce, 15}}, {88, {TE::Reduce, 15}}, {90, {TE::Reduce, 15}}, {91, {TE::Reduce, 15}}, {92, {TE::Reduce, 15}}, {94, {TE::Reduce, 15}}},
    Row {{54, {TE::Reduce, 112}}, {83, {TE::Shift, 180}}},
    Row {{54, {TE::Reduce, 68}}, {83, {TE::Reduce, 68}}},
    Row {{54, {TE::Reduce, 66}}, {71, {TE::Shift, 182}}, {73, {TE::Reduce, 66}}, {83, {TE::Reduce, 66}}},
    Row {{54, {TE::Reduce, 62}}, {69, {TE::Shift, 184}}, {71, {TE::Reduce, 62}}, {73, {TE::Reduce, 62}}, {83, {TE::Reduce, 62}}},
    Row {{14, {TE::Transit, 191}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{14, {TE::Transit, 178}}, {25, {TE::Transit, 177}}, {26, {TE::Transit, 181}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}, {86, {TE::Shift, 179}}},
    Row {{54, {TE::Reduce, 69}}, {83, {TE::Reduce, 69}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 183}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{54, {TE::Reduce, 67}}, {62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 67}}, {83, {TE::Reduce, 67}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 62}}, {30, {TE::Transit, 103}}, {31, {TE::Transit, 59}}, {32, {TE::Transit, 60}}, {43, {TE::Transit, 185}}, {54, {TE::Reduce, 108}}, {59, {TE::Shift, 17}}, {61, {TE::Shift, 64}}, {71, {TE::Reduce, 108}}, {72, {TE::Shift, 104}}, {73, {TE::Reduce, 108}}, {76, {TE::Shift, 61}}, {82, {TE::Shift, 18}}, {83, {TE::Reduce, 108}}, {87, {TE::Shift, 63}}, {88, {TE::Reduce, 108}}},
    Row {{54, {TE::Reduce, 64}}, {71, {TE::Reduce, 64}}, {73, {TE::Reduce, 64}}, {83, {TE::Reduce, 64}}, {88, {TE::Shift, 106}}},
    Row {{89, {TE::Shift, 188}}},
    Row {{89, {TE::Reduce, 107}}},
    Row {{54, {TE::Reduce, 111}}, {71, {TE::Reduce, 111}}, {73, {TE::Reduce, 111}}, {77, {TE::Reduce, 111}}, {83, {TE::Reduce, 111}}, {88, {TE::Reduce, 111}}, {93, {TE::Reduce, 111}}},
    Row {{73, {TE::Shift, 190}}},
    Row {{54, {TE::Reduce, 110}}, {71, {TE::Reduce, 110}}, {73, {TE::Reduce, 110}}, {77, {TE::Reduce, 110}}, {83, {TE::Reduce, 110}}, {88, {TE::Reduce, 110}}, {93, {TE::Reduce, 110}}},
    Row {{54, {TE::Reduce, 63}}, {69, {TE::Shift, 192}}, {71, {TE::Reduce, 63}}, {73, {TE::Reduce, 63}}, {83, {TE::Reduce, 63}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 62}}, {30, {TE::Transit, 103}}, {31, {TE::Transit, 59}}, {32, {TE::Transit, 60}}, {43, {TE::Transit, 193}}, {54, {TE::Reduce, 108}}, {59, {TE::Shift, 17}}, {61, {TE::Shift, 64}}, {71, {TE::Reduce, 108}}, {72, {TE::Shift, 104}}, {73, {TE::Reduce, 108}}, {76, {TE::Shift, 61}}, {82, {TE::Shift, 18}}, {83, {TE::Reduce, 108}}, {87, {TE::Shift, 63}}, {88, {TE::Reduce, 108}}},
    Row {{54, {TE::Reduce, 65}}, {71, {TE::Reduce, 65}}, {73, {TE::Reduce, 65}}, {83, {TE::Reduce, 65}}, {88, {TE::Shift, 106}}},
    Row {{55, {TE::Reduce, 16}}, {56, {TE::Reduce, 16}}, {57, {TE::Reduce, 16}}, {58, {TE::Reduce, 16}}, {59, {TE::Reduce, 16}}, {66, {TE::Reduce, 16}}, {67, {TE::Reduce, 16}}, {68, {TE::Reduce, 16}}, {72, {TE::Reduce, 16}}, {76, {TE::Reduce, 16}}, {78, {TE::Reduce, 16}}, {82, {TE::Reduce, 16}}, {88, {TE::Reduce, 16}}, {90, {TE::Reduce, 16}}, {91, {TE::Reduce, 16}}, {92, {TE::Reduce, 16}}, {94, {TE::Reduce, 16}}},
    Row {{54, {TE::Reduce, 113}}, {83, {TE::Shift, 180}}},
    Row {{55, {TE::Reduce, 18}}, {56, {TE::Reduce, 18}}, {57, {TE::Reduce, 18}}, {58, {TE::Reduce, 18}}, {59, {TE::Reduce, 18}}, {72, {TE::Reduce, 18}}, {76, {TE::Reduce, 18}}, {78, {TE::Reduce, 18}}, {82, {TE::Reduce, 18}}, {88, {TE::Reduce, 18}}, {90, {TE::Reduce, 18}}, {91, {TE::Reduce, 18}}, {92, {TE::Reduce, 18}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {89, {TE::Shift, 198}}},
    Row {{54, {TE::Reduce, 84}}, {62, {TE::Reduce, 84}}, {63, {TE::Reduce, 84}}, {64, {TE::Reduce, 84}}, {65, {TE::Reduce, 84}}, {71, {TE::Reduce, 84}}, {72, {TE::Reduce, 84}}, {73, {TE::Reduce, 84}}, {83, {TE::Reduce, 84}}, {88, {TE::Reduce, 84}}, {89, {TE::Reduce, 84}}},
    Row {{55, {TE::Reduce, 17}}, {56, {TE::Reduce, 17}}, {57, {TE::Reduce, 17}}, {58, {TE::Reduce, 17}}, {59, {TE::Reduce, 17}}, {72, {TE::Reduce, 17}}, {76, {TE::Reduce, 17}}, {78, {TE::Reduce, 17}}, {82, {TE::Reduce, 17}}, {88, {TE::Reduce, 17}}, {90, {TE::Reduce, 17}}, {91, {TE::Reduce, 17}}, {92, {TE::Reduce, 17}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 202}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 203}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}},
    Row {{54, {TE::Reduce, 114}}, {62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}},
    Row {{71, {TE::Reduce, 86}}, {83, {TE::Reduce, 86}}, {88, {TE::Shift, 131}}},
    Row {{55, {TE::Reduce, 19}}, {56, {TE::Reduce, 19}}, {57, {TE::Reduce, 19}}, {58, {TE::Reduce, 19}}, {59, {TE::Reduce, 19}}, {72, {TE::Reduce, 19}}, {76, {TE::Reduce, 19}}, {78, {TE::Reduce, 19}}, {82, {TE::Reduce, 19}}, {88, {TE::Reduce, 19}}, {90, {TE::Reduce, 19}}, {91, {TE::Reduce, 19}}, {92, {TE::Reduce, 19}}},
    Row {{54, {TE::Reduce, 99}}, {62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}},
    Row {{73, {TE::Shift, 210}}},
    Row {{73, {TE::Reduce, 73}}},
    Row {{54, {TE::Reduce, 68}}, {73, {TE::Reduce, 70}}, {83, {TE::Reduce, 68}}},
    Row {{54, {TE::Shift, 213}}, {83, {TE::Shift, 180}}},
    Row {{69, {TE::Shift, 211}}, {71, {TE::Reduce, 60}}, {77, {TE::Reduce, 60}}},
    Row {{14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 62}}, {30, {TE::Transit, 103}}, {31, {TE::Transit, 59}}, {32, {TE::Transit, 60}}, {43, {TE::Transit, 212}}, {59, {TE::Shift, 17}}, {61, {TE::Shift, 64}}, {71, {TE::Reduce, 108}}, {72, {TE::Shift, 104}}, {76, {TE::Shift, 61}}, {77, {TE::Reduce, 108}}, {82, {TE::Shift, 18}}, {87, {TE::Shift, 63}}, {88, {TE::Reduce, 108}}},
    Row {{71, {TE::Reduce, 61}}, {77, {TE::Reduce, 61}}, {88, {TE::Shift, 106}}},
    Row {{14, {TE::Transit, 178}}, {25, {TE::Transit, 177}}, {26, {TE::Transit, 214}}, {59, {TE::Shift, 17}}, {82, {TE::Shift, 18}}, {86, {TE::Shift, 179}}},
    Row {{73, {TE::Reduce, 71}}},
    Row {{71, {TE::Shift, 216}}, {88, {TE::Shift, 106}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 217}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 116}}, {83, {TE::Reduce, 116}}},
    Row {{62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}, {73, {TE::Reduce, 121}}, {83, {TE::Reduce, 121}}},
    Row {{71, {TE::Shift, 220}}, {77, {TE::Shift, 221}}},
    Row {{12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 109}}, {36, {TE::Transit, 222}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}},
    Row {{2, {TE::Transit, 224}}, {55, {TE::Reduce, 8}}, {56, {TE::Reduce, 8}}, {57, {TE::Reduce, 8}}, {58, {TE::Reduce, 8}}, {59, {TE::Reduce, 8}}, {72, {TE::Reduce, 8}}, {76, {TE::Reduce, 8}}, {78, {TE::Reduce, 8}}, {82, {TE::Reduce, 8}}, {88, {TE::Reduce, 8}}, {90, {TE::Reduce, 8}}, {91, {TE::Reduce, 8}}, {92, {TE::Reduce, 8}}},
    Row {{54, {TE::Shift, 223}}, {62, {TE::Shift, 122}}, {63, {TE::Shift, 123}}, {64, {TE::Shift, 124}}, {65, {TE::Shift, 125}}},
    Row {{66, {TE::Reduce, 25}}, {67, {TE::Reduce, 25}}, {68, {TE::Reduce, 25}}, {91, {TE::Reduce, 25}}, {92, {TE::Reduce, 25}}, {94, {TE::Reduce, 25}}},
    Row {{3, {TE::Transit, 162}}, {4, {TE::Transit, 163}}, {5, {TE::Transit, 164}}, {6, {TE::Transit, 166}}, {7, {TE::Transit, 165}}, {8, {TE::Transit, 167}}, {12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 169}}, {35, {TE::Transit, 171}}, {36, {TE::Transit, 168}}, {38, {TE::Transit, 172}}, {44, {TE::Transit, 11}}, {45, {TE::Transit, 13}}, {46, {TE::Transit, 170}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {78, {TE::Shift, 225}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}, {90, {TE::Shift, 173}}, {91, {TE::Shift, 12}}, {92, {TE::Shift, 14}}},
    Row {{66, {TE::Reduce, 26}}, {67, {TE::Reduce, 26}}, {68, {TE::Reduce, 26}}, {91, {TE::Reduce, 26}}, {92, {TE::Reduce, 26}}, {94, {TE::Reduce, 26}}},
    Row {{77, {TE::Shift, 227}}},
    Row {{2, {TE::Transit, 228}}, {55, {TE::Reduce, 8}}, {56, {TE::Reduce, 8}}, {57, {TE::Reduce, 8}}, {58, {TE::Reduce, 8}}, {59, {TE::Reduce, 8}}, {72, {TE::Reduce, 8}}, {76, {TE::Reduce, 8}}, {78, {TE::Reduce, 8}}, {82, {TE::Reduce, 8}}, {88, {TE::Reduce, 8}}, {90, {TE::Reduce, 8}}, {91, {TE::Reduce, 8}}, {92, {TE::Reduce, 8}}},
    Row {{3, {TE::Transit, 162}}, {4, {TE::Transit, 163}}, {5, {TE::Transit, 164}}, {6, {TE::Transit, 166}}, {7, {TE::Transit, 165}}, {8, {TE::Transit, 167}}, {12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 169}}, {35, {TE::Transit, 171}}, {36, {TE::Transit, 168}}, {38, {TE::Transit, 172}}, {44, {TE::Transit, 11}}, {45, {TE::Transit, 13}}, {46, {TE::Transit, 170}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {78, {TE::Shift, 229}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}, {90, {TE::Shift, 173}}, {91, {TE::Shift, 12}}, {92, {TE::Shift, 14}}},
    Row {{66, {TE::Reduce, 27}}, {67, {TE::Reduce, 27}}, {68, {TE::Reduce, 27}}, {91, {TE::Reduce, 27}}, {92, {TE::Reduce, 27}}, {94, {TE::Reduce, 27}}},
    Row {{77, {TE::Shift, 231}}},
    Row {{2, {TE::Transit, 232}}, {55, {TE::Reduce, 8}}, {56, {TE::Reduce, 8}}, {57, {TE::Reduce, 8}}, {58, {TE::Reduce, 8}}, {59, {TE::Reduce, 8}}, {72, {TE::Reduce, 8}}, {76, {TE::Reduce, 8}}, {78, {TE::Reduce, 8}}, {82, {TE::Reduce, 8}}, {88, {TE::Reduce, 8}}, {90, {TE::Reduce, 8}}, {91, {TE::Reduce, 8}}, {92, {TE::Reduce, 8}}},
    Row {{3, {TE::Transit, 162}}, {4, {TE::Transit, 163}}, {5, {TE::Transit, 164}}, {6, {TE::Transit, 166}}, {7, {TE::Transit, 165}}, {8, {TE::Transit, 167}}, {12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 169}}, {35, {TE::Transit, 171}}, {36, {TE::Transit, 168}}, {38, {TE::Transit, 172}}, {44, {TE::Transit, 11}}, {45, {TE::Transit, 13}}, {46, {TE::Transit, 170}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {78, {TE::Shift, 233}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}, {90, {TE::Shift, 173}}, {91, {TE::Shift, 12}}, {92, {TE::Shift, 14}}},
    Row {{66, {TE::Reduce, 28}}, {67, {TE::Reduce, 28}}, {68, {TE::Reduce, 28}}, {91, {TE::Reduce, 28}}, {92, {TE::Reduce, 28}}, {94, {TE::Reduce, 28}}},
    Row {{77, {TE::Shift, 235}}},
    Row {{2, {TE::Transit, 236}}, {55, {TE::Reduce, 8}}, {56, {TE::Reduce, 8}}, {57, {TE::Reduce, 8}}, {58, {TE::Reduce, 8}}, {59, {TE::Reduce, 8}}, {72, {TE::Reduce, 8}}, {76, {TE::Reduce, 8}}, {78, {TE::Reduce, 8}}, {82, {TE::Reduce, 8}}, {88, {TE::Reduce, 8}}, {90, {TE::Reduce, 8}}, {91, {TE::Reduce, 8}}, {92, {TE::Reduce, 8}}},
    Row {{3, {TE::Transit, 162}}, {4, {TE::Transit, 163}}, {5, {TE::Transit, 164}}, {6, {TE::Transit, 166}}, {7, {TE::Transit, 165}}, {8, {TE::Transit, 167}}, {12, {TE::Transit, 108}}, {13, {TE::Transit, 112}}, {14, {TE::Transit, 27}}, {16, {TE::Transit, 65}}, {17, {TE::Transit, 120}}, {34, {TE::Transit, 169}}, {35, {TE::Transit, 171}}, {36, {TE::Transit, 168}}, {38, {TE::Transit, 172}}, {44, {TE::Transit, 11}}, {45, {TE::Transit, 13}}, {46, {TE::Transit, 170}}, {51, {TE::Transit, 113}}, {52, {TE::Transit, 114}}, {53, {TE::Transit, 110}}, {55, {TE::Shift, 115}}, {56, {TE::Shift, 116}}, {57, {TE::Shift, 117}}, {58, {TE::Shift, 118}}, {59, {TE::Shift, 17}}, {72, {TE::Shift, 111}}, {76, {TE::Shift, 121}}, {78, {TE::Shift, 237}}, {82, {TE::Shift, 18}}, {88, {TE::Shift, 119}}, {90, {TE::Shift, 173}}, {91, {TE::Shift, 12}}, {92, {TE::Shift, 14}}},
    Row {{66, {TE::Reduce, 29}}, {67, {TE::Reduce, 29}}, {68, {TE::Reduce, 29}}, {91, {TE::Reduce, 29}}, {92, {TE::Reduce, 29}}, {94, {TE::Reduce, 29}}}
};
// clang-format on

}  // namespace syntax

#endif
