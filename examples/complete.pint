{
	You must declare a unit.
}
unit crm;

{
	You can import other units, unit members, and alias them.
}
uses
	io,                                 // import entire unit
	email.Transport,                    // import a single unit member
	mailgun.Transport as EmailTransport // import with an alias
;

{
	Enumerators
}
register Days: label = (
	MON,
	TUE,
	WED,
	THU,
	FRI,
	SAT,
	SUN
);


{
	Records (like structs)
}
register isBeing: record = (
	name: string,
	age: cardinal
);


{
	Extending Records
}
register hasEmail: record(isBeing) = (
	email: string
);


{
	Interfaces
}
register canEmail: interface
begin
	const setEmailTransport: function(transport: Transport);
	const email: function(subject, message: string);
end


{
	Implementations (triats) can implement interfaces, can include records
}
register doEmail: implementation(hasEmail; canEmail)
begin
	private:
		const transport: Transport;

	public:
		{

		}
		const setEmailTransport: function(var transport: Transport)
		begin
			this.transport = transport;
		end

		{

		}
		const email: function(subject, message: string): ?Err
		begin
			if !this.email then
				result = new Err('Cannot send email, email not set');

			else
				this.transport
					.setSubject(subject)
					.setBody(message)
					.send((
						name: this.name,
						email: this.email
					))
				;
		end
end


{
	Classes can implement interfaces, include records, and use implementations. In the example
	below we use the StudentSpeaker implementation, which in turn means means that this includes
	the isStudent record, and recursively the isBeing record, as well as implementing the
	canSpeak interface.
}

register Person: class(doEmail)
begin
	private:
		var friends: Person[];

	public:
		{

		}
		const constructor(name: string(255); age: cardinal(1); email: string)
		begin
			this.name  = name;
			this.age   = age;
			this.email = email;
		end

		{

		}
		const befriend: function(...friends: Person): self
		begin
			// friends.each(function(friend: Person): void
			// 	begin
			// 		this.friends.add(friend);
			// 	end
			// );
		end

		{

		}
		const share: function(subject, message: string): ?bool
		begin
			var errors: Error[];

			for var friend: Person in this.friends then
			begin
				var result? error = friend.email@doEmail(subject, message);

				on error is Error then
					errors[] = error;
			end

			if errors.length then
				return new Error(
					'Could not share to %d friends'.format(errors.length()),
					errors
				);

			return true;
		end
end
