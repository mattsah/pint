unit main;

uses
	io,
	crono.DateTime,
	crypt\rot13.(encode as encrypt)
;

var EXVAR = 1;
set EXSET = 2;

register ExType: type = (
	string,
	integer
);

register ExLabel: label = (
	INFO,
	WARNING,
	ERROR,
	CRITICAL
);

register ExRecord: record = (
	msg: string,
	created: integer default crono.time()
);

{
	Testing
}
register main: function(argc: integer; argv: string[]): integer
begin

	{
		Various declarations
	}

	var a;                 // implicit dynamic type, implicit dynamic size
	var b:;                // implicit fixed type, implicit dynamic size
	var c: ();             // implicit fixed type, implicit fixed size
	var d: (8);            // implicit fixed type, explicit fixed size
	var e: integer;        // explicit fixed type, implicit dynamic size
	var f: integer();      // explicit fixed type, implicit fixed size
	var g: integer(8);     // explicit fixed type, explicit fixed size
	var h: integer(8)[];
	var i: integer()[];
	var j: integer[];
	var k: (8)[];
	var l: ()[];
	var m: [];
end

{
	[param] string @msg A reference to a string
}
register foo: function(@msg: string): function
begin
	io.writeLn(msg);

	return (
		function()
		begin

		end
	);
end
