%{
  #include "tree.h"

  using namespace pint;
  using Value = std::shared_ptr<Node>;
%}


%token REAL
%token INTEGER
%token BOOLEAN
%token STRING
%token IDENTIFIER
%token COLON
%token SEMICOLON
%token SEPARATOR

%%

code
  : %empty {
    $$ = std::make_shared<ListNode>();
  }
  | code code_line {
    as(ListNode, $1)->list.push_back($2);
    $$ = $1;
  }
;

code_line
  : unit
  | uses
  | register {
    $$ = $1;
  }
;

body
  : %empty {
    $$ = std::make_shared<ListNode>();
  }
  | body body_line {
    as(ListNode, $1)->list.push_back($2);
    $$ = $1;
  }
;

body_line
  : "test" SEMICOLON {
    $$ = std::make_shared<Node>();
  }
;

identifier
  : IDENTIFIER {
    // identifier
    $$ = std::make_shared<IdentifierNode>($1);
  }
;

path_as
  : unit_path {
    $$ = std::make_shared<PathAsNode>(as(ListNode, $1));
  }
  | unit_path '.' identifier {
    $$ = std::make_shared<PathAsNode>(as(ListNode, $1), as(IdentifierNode, $3));
  }
  | path_as "as" identifier {
    as(PathAsNode, $1)->setAlias(as(IdentifierNode, $3));
    $$ = $1;
  }
  | unit_path '(' identifier_as_list ')' {
    $$ = std::make_shared<Node>();
  } 
;

identifier_as
  : identifier {
    $$ = std::make_shared<Node>();
  }
  | identifier "as" identifier {
    $$ = std::make_shared<Node>();
  }
;

identifier_as_list
  : identifier_as {
    $$ = std::make_shared<ListNode>($1);
  }
  | identifier_as_list ',' identifier_as {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

unit
  : "unit" unit_path SEMICOLON {
    $$ = std::make_shared<UnitNode>(as(ListNode, $2));
  }
;

unit_path
  : identifier {
    $$ = std::make_shared<ListNode>($1);
  }
  | unit_path SEPARATOR identifier {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

unit_path_list
  : unit_path {
    $$ = std::make_shared<ListNode>($1);
  }
  | unit_path ',' unit_path {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

uses
  : "uses" uses_list SEMICOLON {
    $$ = std::make_shared<UsesNode>(as(ListNode, $2));
  }
;

uses_list
  : path_as {
    $$ = std::make_shared<ListNode>($1);
  }
  | uses_list ',' path_as {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

register
  : "register" identifier COLON type_form_decl '=' body_line {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier COLON type_func_decl '=' body_line {
    // register: function =
    $$ = std::make_shared<Node>();
  }
  | "register" identifier COLON type_func_decl "begin" body "end" {
    // register: function body
    $$ = std::make_shared<Node>();
  }
  | "register" identifier COLON type_tmpl_decl "begin" body "end" {
    $$ = std::make_shared<Node>();
  }
;

size
  : %empty {
    $$ = std::make_shared<Node>();
  }
  | INTEGER {
    // size: INTEGER
    $$ = std::make_shared<Node>();
  }
;

length
  : %empty {
    $$ = std::make_shared<Node>();
  }
  | INTEGER {
    // length: INTEGER
    $$ = std::make_shared<Node>();
  }
;

return
  : void {
    // return: void
    $$ = std::make_shared<Node>();
  }
  | type {
    // return: type
    $$ = std::make_shared<Node>();
  }
;

type
  : type_base {
    // type: type_base
    $$ = std::make_shared<Node>();
  }
  | identifier {
    // type: identifier
    $$ = std::make_shared<Node>();
  }
  | type '[' length ']' {
    // type: type_base|identifier[length]i
    $$ = $1;
  }
;

literal
  : REAL
  | INTEGER
  | BOOLEAN
  | STRING {
    $$ = std::make_shared<Node>();
  }
;

type_form_decl
  : type_form {
    $$ = std::make_shared<Node>();
  }
  | type_form '(' ')' {
    $$ = std::make_shared<Node>();
  }
  | type_form '(' unit_path_list ')' {
    $$ = std::make_shared<Node>();
  }
;

type_tmpl_decl
  : type_tmpl {
    $$ = std::make_shared<Node>();
  }
  | type_tmpl '(' ')' {
    $$ = std::make_shared<Node>();
  }
  | type_tmpl '(' unit_path_list ')' {
    $$ = std::make_shared<Node>();
  }
;

type_func_decl
  : type_func '(' arg_list ')' COLON return {
    // type_func_decl
    $$ = std::make_shared<Node>();
  }
;

type_cons_decl
  : type_cons '(' arg_list ')' COLON void {
    $$ = std::make_shared<Node>();
  }
;

identifier_list
  : identifier {
    $$ = std::make_shared<ListNode>($1);
  }
  | identifier_list ',' identifier {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

arg
  : identifier_list {
    $$ = $1;
  }
  | identifier_list COLON type {
    $$ = $1;
  }
;

arg_set
  : arg {
    // arg
    $$ = std::make_shared<ListNode>($1);
  }
  | arg_set SEMICOLON arg {
    // arg_set SEMICOLON arg
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

arg_list
  : %empty {
    // arg_list: empty
    $$ = std::make_shared<ListNode>();
  }
  | arg_set {
    // arg_set
    $$ = $1;
  }
;

void
  : "void" {
    // void
    $$ = std::make_shared<Node>();
  }
;

type_base
  : "integer" | "cardinal" | "real" | "char" | "string" | "boolean" {
    $$ = std::make_shared<Node>();
  }
  | type_base '(' size ')' {
    $$ = $1
  }
;

type_form
  : "label" | "type" | "record" {
    $$ = std::make_shared<Node>();
  }
;

type_tmpl
  : "interface" | "implementation" | "class" {
    $$ = std::make_shared<Node>();
  }
;

type_func
  : "function" {
    $$ = std::make_shared<Node>();
  }
;

type_cons
  : "constructor" {
    $$ = std::make_shared<Node>();
  }
;
