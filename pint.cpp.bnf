%{
  #include "tree.h"

  using namespace pint;
  using Value = std::shared_ptr<Node>;


  #define debug(msg) std::cout << std::string(2 * (parser.valuesStack.size()), ' ') << msg << std::endl;
  // #define debug(msg)
%}


%token TYPE_BASE
%token STRING
%token BOOLEAN
%token REAL
%token INTEGER
%token IDENTIFIER
%token SEMICOLON
%token SEPARATOR

%right '='
%left  '+' '-'
%left  '*' '/'

%%

program
  : %empty {
    $$ = std::make_shared<ListNode>();
  }
  | program program_line {
		as(ListNode, $1)->list.push_back($2);
		$$ = $1;
  }
;

program_line
  : unit_stmt
  | uses_stmt
  | register_stmt
  | var_decl_stmt
  | set_decl_stmt
;

block
	: %empty {
		$$ = std::make_shared<ListNode>();
	}
	| block block_line {
		as(ListNode, $1)->list.push_back($2);
		$$ = $1;
	}
;

block_line
  : var_decl_stmt
	| set_decl_stmt
	| call_stmt
	| assign_stmt
	| return_stmt
;

var_decl_stmt
	: var_decl SEMICOLON {
		$$ = $1;
	}
;

set_decl_stmt
	: set_decl SEMICOLON {
		$$ = $1;
	}
;

assign_stmt
	: assign SEMICOLON {
		$$ = $1;
	}
;

call_stmt
	: call SEMICOLON {
		$$ = $1;
	}
;

return_stmt
	: return SEMICOLON {
		$$ = $1;
	}
;

unit_stmt
  : "unit" path SEMICOLON {
    $$ = std::make_shared<UnitNode>(as(ListNode, $2));
  }
;

uses_stmt
  : "uses" import_list SEMICOLON {
    $$ = std::make_shared<UsesNode>(as(ListNode, $2));
  }
;

register_stmt
  : "register" identifier ':' "type" form_decl '=' '(' type_list ')' SEMICOLON {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' "label" form_decl '=' '(' identifier_list ')' SEMICOLON {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' "record" form_decl '=' '(' record_list ')' SEMICOLON {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' "function" func_decl '=' expr SEMICOLON {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' "function" func_decl "begin" block "end" {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' "class" form_decl "begin" block "end" {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' "interface" form_decl "begin" block "end" {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' "implementation" form_decl "begin" block "end" {
    $$ = std::make_shared<Node>();
  }
;

literal
  : base_literal {
    $$ = std::make_shared<Node>();
  }
  | array_literal {
    $$ = std::make_shared<Node>();
  }
  | object_literal {
    $$ = std::make_shared<Node>();
  }
;

base_literal
  : REAL {
    $$ = std::make_shared<Node>();
  }
  | INTEGER {
    $$ = std::make_shared<Node>();
  }
  | BOOLEAN {
    $$ = std::make_shared<Node>();
  }
  | STRING {
    $$ = std::make_shared<Node>();
  }
;

identifier
  : IDENTIFIER {
    $$ = std::make_shared<IdentifierNode>($1);
  }
	| '$' identifier {
		$$ = $2;
	}
;

identifier_list
  : identifier {
    $$ = std::make_shared<ListNode>($1);
  }
  | identifier_list ',' identifier {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

path
  : identifier {
    $$ = std::make_shared<ListNode>($1);
  }
  | path SEPARATOR identifier {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

symbol
  : identifier {
    $$ = std::make_shared<Node>();
  }
  | path '.' identifier {
    $$ = std::make_shared<Node>();
  }
;

symbol_list
  : symbol {
    $$ = std::make_shared<ListNode>($1);
  }
  | symbol_list ',' symbol {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

import_list
  : import {
    $$ = std::make_shared<ListNode>($1);
  }
  | import_list ',' import {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

import
  : symbol {
    $$ = std::make_shared<Node>();
  }
  | symbol "as" identifier {
    $$ = std::make_shared<Node>();
  }
  | path '(' module_list ')' {
    $$ = std::make_shared<Node>();
  }
;

module_list
  : module {
    $$ = std::make_shared<ListNode>($1);
  }
  | module_list ',' module {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

module
  : identifier {
    $$ = std::make_shared<Node>();
  }
  | identifier "as" identifier {
    $$ = std::make_shared<Node>();
  }
;


form_decl
  : %empty {
    $$ = std::make_shared<Node>();
  }
  | '(' ')' {
    $$ = std::make_shared<Node>();
  }
  | '(' symbol_list ')' {
    $$ = std::make_shared<Node>();
  }
;

func_decl
  : %empty {
		$$ = std::make_shared<Node>();
	}
	| '(' args ')' {
    $$ = std::make_shared<Node>();
  }
  | '(' args ')' ':' cast {
    $$ = std::make_shared<Node>();
  }
;

cons_decl
	: %empty {
		$$ = std::make_shared<Node>();
	}
	| '(' args ')' {
		$$ = std::make_shared<Node>();
	}
  | '(' args ')' ':' type_void {
    $$ = std::make_shared<Node>();
  }
;

var
  : identifier {
    $$ = std::make_shared<Node>();
  }
	| '@' identifier {
		$$ = std::make_shared<Node>();
	}
	| identifier ':' cast {
		$$ = std::make_shared<Node>();
	}
  | '@' identifier ':' cast {
    $$ = $2;
  }
;

var_val
	: var {
		$$ = std::make_shared<Node>();
	}
	| var '=' expr {
		$$ = std::make_shared<Node>();
	}
;

var_list
	: var_val {
		$$ = std::make_shared<ListNode>($1);
	}
	| var_list ',' var_val {
		as(ListNode, $1)->list.push_back($3);
		$$ = $1;
	}
;

arg_list
  : var_val {
    $$ = std::make_shared<ListNode>($1);
  }
  | var_list SEMICOLON var_val {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

args
  : %empty {
    $$ = std::make_shared<Node>();
  }
  | arg_list {
    $$ = $1;
  }
;

type
	: type_void {
    $$ = std::make_shared<Node>();
  }
  | type_base {
    $$ = std::make_shared<Node>();
  }
	| "function" {
		$$ = std::make_shared<Node>();
	}
  | symbol {
    $$ = std::make_shared<Node>();
  }
;

type_void
  : "void" {
    $$ = std::make_shared<Node>();
  }
;

type_base
  : TYPE_BASE {
    $$ = std::make_shared<Node>();
  }
  | type_base '(' size ')' {
    $$ = std::make_shared<Node>();
  }
;

type_list
  : type {
    $$ = std::make_shared<Node>();
  }
  | type_list ',' type {
    $$ = std::make_shared<Node>();
  }
;

mark
	: path {
		$$ = std::make_shared<Node>();
	}
	| path '.' identifier {
		$$ = std::make_shared<Node>();
	}
	| mark '[' expr ']' {
		$$ = std::make_shared<Node>();
	}
;

mark_list
	: mark {
		$$ = std::make_shared<ListNode>($1);
	}
	| mark_list ',' mark {
		as(ListNode, $1)->list.push_back($3);
		$$ = $1;
	}
;

expr
  : literal {
    $$ = std::make_shared<Node>();
  }
	| function_literal {
		$$ = std::make_shared<Node>();
	}
	| mark {
		$$ = std::make_shared<Node>();
	}
	| call {
		$$ = std::make_shared<Node>();
	}
  | '(' expr ')' {
    $$ = std::make_shared<Node>();
  }
	| expr '+' expr {
		$$ = std::make_shared<Node>();
	}
	| expr '-' expr {
		$$ = std::make_shared<Node>();
	}
	| expr '*' expr {
		$$ = std::make_shared<Node>();
	}
	| expr '/' expr {
		$$ = std::make_shared<Node>();
	}
;

expr_list
  : %empty {
    $$ = std::make_shared<ListNode>();
  }
  | expr {
    $$ = std::make_shared<ListNode>($1);
  }
  | expr_list ',' expr {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

call
	: mark '(' params ')' {
		$$ = std::make_shared<Node>();
	}
;

return
	: "return" expr {
		$$ = std::make_shared<Node>();
	}
;

param_list
  : expr {
    $$ = std::make_shared<ListNode>($1);
  }
  | param_list ',' expr {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

params
  : %empty {
    $$ = std::make_shared<ListNode>();
  }
  | param_list {
    $$ = $1;
  }
;

size
  : %empty {
    $$ = std::make_shared<Node>();
  }
  | INTEGER {
    // size: INTEGER
    $$ = std::make_shared<Node>();
  }
;

length
  : %empty {
    $$ = std::make_shared<Node>();
  }
  | INTEGER {
    $$ = std::make_shared<Node>();
  }
;

cast
  : %empty {
    $$ = std::make_shared<Node>();
  }
	| type {
		$$ = std::make_shared<Node>();
	}
  | '(' size ')' {
    $$ = std::make_shared<Node>();
  }
  | cast '[' length ']' {
    $$ = std::make_shared<Node>();
  }
;

var_decl
  : "var" var_list {
    $$ = std::make_shared<Node>();
  }
;

set_decl
  : "set" var_list {
    $$ = std::make_shared<Node>();
  }
;

assign
  : mark_list '=' expr {
    $$ = std::make_shared<Node>();
  }
;

map
  : identifier '=' expr {
    $$ = std::make_shared<Node>();
  }
  | identifier ':' cast '=' expr {
    $$ = std::make_shared<Node>();
  }
;

map_list
  : map {
    $$ = std::make_shared<Node>();
  }
  | map_list ',' map {
    $$ = std::make_shared<Node>();
  }
;

record
  : identifier {
    $$ = std::make_shared<Node>();
  }
  | identifier ':' cast {
    $$ = std::make_shared<Node>();
  }
  | identifier "default" expr {
    $$ = std::make_shared<Node>();
  }
  | identifier ':' cast "default" expr {
    $$ = std::make_shared<Node>();
  }
;

record_list
  : record {
    $$ = std::make_shared<Node>();
  }
  | record_list ',' record {
    $$ = std::make_shared<Node>();
  }
;

array_literal
  : '[' expr_list ']' {
    $$ = std::make_shared<Node>();
  }
;

object_literal
  : '(' map_list ')' {
    $$ = std::make_shared<Node>();
  }
;

function_literal
	: "function" func_decl '=' expr {
		$$ = std::make_shared<Node>();
	}
	| "function" func_decl "begin" block "end" {
		$$ = std::make_shared<Node>();
	}
;

