%{
  #include "tree.h"

  using namespace pint;
  using Value = std::shared_ptr<Node>;

  
  #define debug(msg) std::cout <<  std::string(2 * (parser.valuesStack.size() - 1), ' ') << msg << std::endl;
  // #define debug(msg)
%}


%token TYPE_BASE
%token TYPE_FORM
%token TYPE_TMPL
%token STRING
%token BOOLEAN
%token REAL
%token INTEGER
%token IDENTIFIER
%token SEMICOLON
%token SEPARATOR

%%

code
  : %empty {
    $$ = std::make_shared<ListNode>();
  }
  | code code_line {
    as(ListNode, $1)->list.push_back($2);
    $$ = $1;
  }
;

code_line
  : unit {
    debug("code_line: unit" << std::endl);
    $$ = $1;
  }
  | uses {
    debug("code_line: uses" << std::endl);
    $$ = $1;
  }
  | register {
    debug("code_line: register" << std::endl);
    $$ = $1;
  }
;

body
  : %empty {
    debug("body: empty");
    $$ = std::make_shared<ListNode>();
  }
  | body body_line {
    debug("body: body body_line");
    as(ListNode, $1)->list.push_back($2);
    $$ = $1;
  }
;

body_line
  : expr SEMICOLON {
    debug("body_line: expr;");
    $$ = std::make_shared<Node>();
  }
;

literal
  : base_literal {
    $$ = std::make_shared<Node>();
  }
;

base_literal
  : REAL {
    debug("literal: " + $1);
    $$ = std::make_shared<Node>();
  }
  | INTEGER {
    debug("literal: " + $1);
    $$ = std::make_shared<Node>();
  }
  | BOOLEAN {
    debug("literal: " + $1);
    $$ = std::make_shared<Node>();
  }
  | STRING {
    debug("literal: " + $1);
    $$ = std::make_shared<Node>();
  }
;

identifier
  : IDENTIFIER {
    debug("identifier: IDENTIFIER(" + $1 + ")");
    $$ = std::make_shared<IdentifierNode>($1);
  }
;

path
  : identifier {
    debug("path: identifier");
    $$ = std::make_shared<ListNode>($1);
  }
  | path SEPARATOR identifier {
    debug("path: path\\identifier");
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

symbol
  : identifier {
    $$ = std::make_shared<Node>();
  }
  | path '.' identifier {
    $$ = std::make_shared<Node>();
  }
;

symbol_list
  : symbol {
    $$ = std::make_shared<ListNode>($1);
  }
  | symbol_list ',' symbol {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

unit
  : "unit" identifier SEMICOLON {
    debug("unit: unit identifier;");
    $$ = std::make_shared<UnitNode>(std::make_shared<ListNode>($2));
  }
  | "unit" path SEPARATOR identifier {
    debug("unit: unit path\\identifier;");
    as(ListNode, $2)->list.push_back($4);
    $$ = std::make_shared<UnitNode>(as(ListNode, $2));
  } 
;

uses
  : "uses" import_list SEMICOLON {
    debug("uses: import_list;")
    $$ = std::make_shared<UsesNode>(as(ListNode, $2));
  }
;

import_list
  : import {
    $$ = std::make_shared<ListNode>($1);
  }
  | import_list ',' import {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

import
  : symbol {
    $$ = std::make_shared<Node>();
  }
  | symbol "as" identifier {
    $$ = std::make_shared<Node>();
  }
  | path '(' module_list ')' {
    $$ = std::make_shared<Node>();
  }
;

module_list
  : module {
    $$ = std::make_shared<ListNode>($1);
  }
  | module_list ',' module {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

module
  : identifier {
    $$ = std::make_shared<Node>();
  }
  | identifier "as" identifier {
    $$ = std::make_shared<Node>();
  }
;

register
  : "register" identifier ':' type_form_decl '=' body_line {
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' type_func_decl '=' body_line {
    // register: function =
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' type_func_decl "begin" body "end" {
    debug("register: register identifier: type_func_decl begin body end");
    $$ = std::make_shared<Node>();
  }
  | "register" identifier ':' type_tmpl_decl "begin" body "end" {
    $$ = std::make_shared<Node>();
  }
;

size
  : %empty {
    $$ = std::make_shared<Node>();
  }
  | INTEGER {
    // size: INTEGER
    $$ = std::make_shared<Node>();
  }
;

length
  : %empty {
    $$ = std::make_shared<Node>();
  }
  | INTEGER {
    // length: INTEGER
    $$ = std::make_shared<Node>();
  }
;

return
  : void {
    // return: void
    $$ = std::make_shared<Node>();
  }
  | type {
    // return: type
    $$ = std::make_shared<Node>();
  }
;

type
  : type_base {
    debug("type: type_base");
    $$ = std::make_shared<Node>();
  }
  | identifier {
    debug("type: identifier");
    $$ = std::make_shared<Node>();
  }
  | type '[' length ']' {
    debug("type: type[length]");
    $$ = $1;
  }
;



type_form_decl
  : type_form {
    $$ = std::make_shared<Node>();
  }
  | type_form '(' ')' {
    $$ = std::make_shared<Node>();
  }
  | type_form '(' symbol_list ')' {
    $$ = std::make_shared<Node>();
  }
;

type_tmpl_decl
  : type_tmpl {
    $$ = std::make_shared<Node>();
  }
  | type_tmpl '(' ')' {
    $$ = std::make_shared<Node>();
  }
  | type_tmpl '(' symbol_list ')' {
    $$ = std::make_shared<Node>();
  }
;

type_func_decl
  : type_func '(' arg_list ')' ':' return {
    debug("type_func_decl: type_func(arg_list): return");
    $$ = std::make_shared<Node>();
  }
;

type_cons_decl
  : type_cons '(' arg_list ')' ':' void {
    $$ = std::make_shared<Node>();
  }
;

identifier_list
  : identifier {
    debug("identifier_list: identifier");
    $$ = std::make_shared<ListNode>($1);
  }
  | identifier_list ',' identifier {
    debug("identifier_list: identiifer_list, identifier");
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

arg
  : identifier_list {
    debug("arg: identifier_list");
    $$ = std::make_shared<Node>();
  }
  | "var" identifier_list {
    debug("arg: var identifier_list");
    $$ = std::make_shared<Node>();
  }
  | arg ':' type {
    debug("arg: arg: type");
    $$ = $1;
  }
;

arg_set
  : arg {
    debug("arg_set: arg");
    $$ = std::make_shared<ListNode>($1);
  }
  | arg_set SEMICOLON arg {
    debug("arg_set: arg_set SEMICOLON arg");
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

arg_list
  : %empty {
    debug("arg_list: empty");
    $$ = std::make_shared<ListNode>();
  }
  | arg_set {
    debug("arg_list: arg_set");
    $$ = $1;
  }
;

type_base
  : TYPE_BASE {
    debug("type_base: " + $1);
    $$ = std::make_shared<Node>();
  }
  | type_base '(' size ')' {
    debug("type_base: type_base(size)");
    $$ = $1
  }
;

type_form
  : TYPE_FORM {
    debug("type_form: " + $1);
    $$ = std::make_shared<Node>();
  }
;

type_tmpl
  : TYPE_TMPL {
    debug("type_tmpl: " + $1);
    $$ = std::make_shared<Node>();
  }
;

type_func
  : "function" {
    debug("type_func: function");
    $$ = std::make_shared<Node>();
  }
;

type_cons
  : "constructor" {
    debug("type_cons: constructor");
    $$ = std::make_shared<Node>();
  }
;

void
  : "void" {
    debug("void: void");
    $$ = std::make_shared<Node>();
  }
;

expr
  : literal {
    $$ = std::make_shared<Node>();
  }
  | path {
    $$ = std::make_shared<Node>();
  }
  | expr '[' expr ']' {
    $$ = std::make_shared<Node>();
  }
  | expr '.' identifier {
    $$ = std::make_shared<Node>();
  }
  | expr '.' identifier '(' param_list ')' {
    $$ = std::make_shared<Node>();
  }
;

param_list
  : %empty {
    $$ = std::make_shared<ListNode>();
  }
  | param_set {
    $$ = $1;
  }
;

param_set 
  : expr {
    $$ = std::make_shared<ListNode>($1);
  }
  | param_set ',' expr {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  } 
;
