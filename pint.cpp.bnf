%{
  #include "tree.h"

  using namespace pint;
  using Value = std::shared_ptr<Node>;
%}

%%

code
  : stmt SEMICOLON {
    $$ = std::make_shared<ListNode>($1);
  }
  | code stmt SEMICOLON {
    as(ListNode, $1)->list.push_back($2);
    $$ = $1;
  }
;

stmt
  : unit_stmt
  | uses_stmt {
    $$ = $1;
  }
;

identifier_expr
  : IDENTIFIER {
    $$ = std::make_shared<IdentifierNode>($1);
  }
;

identifier_path_expr
  : identifier_expr {
    $$ = std::make_shared<ListNode>($1);
  }
  | identifier_path_expr '.' identifier_expr {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

path_as_expr
  : unit_path_expr {
    $$ = std::make_shared<PathAsNode>(as(ListNode, $1));
  }
  | unit_path_expr '.' identifier_expr {
    $$ = std::make_shared<PathAsNode>(as(ListNode, $1), as(IdentifierNode, $3));
  }
  | path_as_expr 'as' identifier_expr {
    as(PathAsNode, $1)->setAlias(as(IdentifierNode, $3));
    $$ = $1;
  }
  | unit_path_expr '(' identifier_as_list_expr ')' {
    $$ = std::make_shared<Node>();
  } 
;

identifier_as_expr
  : identifier_expr {
    $$ = std::make_shared<Node>();
  }
  | identifier_expr 'as' identifier_expr {
    $$ = std::make_shared<Node>();
  }
;

identifier_as_list_expr
  : identifier_as_expr {
    $$ = std::make_shared<Node>();
  }
  | identifier_as_list_expr ',' identifier_as_expr {
    $$ = std::make_shared<Node>();
  }
;

unit_stmt
  : UNIT unit_path_expr {
    $$ = std::make_shared<UnitNode>(as(ListNode, $2));
  }
;

unit_path_expr
  : identifier_expr {
    $$ = std::make_shared<ListNode>($1);
  }
  | unit_path_expr SEPARATOR identifier_expr {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

uses_stmt
  : USES uses_list_expr {
    $$ = std::make_shared<UsesNode>(as(ListNode, $2));
  }
;

uses_list_expr
  : path_as_expr {
    $$ = std::make_shared<ListNode>($1);
  }
  | uses_list_expr ',' path_as_expr {
    as(ListNode, $1)->list.push_back($3);
    $$ = $1;
  }
;

everything
  : UNIT USES CONST VAR BEGIN IF THEN ELSE CASE IS END REGISTER CONSTRUCTOR FUNCTION BOOL INT FLOAT STRING IDENTIFIER SEMICOLON SEPARATOR {
    $$ = std::make_shared<Node>();
  }
;
